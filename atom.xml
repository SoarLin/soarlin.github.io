<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SoarLin</title>
  <icon>https://www.gravatar.com/avatar/141a62d46312011efbd488c0f2d4f615</icon>
  <subtitle>工作中的知識累積</subtitle>
  <link href="https://soarlin.github.io/atom.xml" rel="self"/>
  
  <link href="https://soarlin.github.io/"/>
  <updated>2024-04-13T09:08:24.566Z</updated>
  <id>https://soarlin.github.io/</id>
  
  <author>
    <name>Soar Lin</name>
    <email>soar.lin@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用JavaScript Date轉換時間要小心</title>
    <link href="https://soarlin.github.io/2024/04/13/javascript-new-date/"/>
    <id>https://soarlin.github.io/2024/04/13/javascript-new-date/</id>
    <published>2024-04-13T07:22:19.000Z</published>
    <updated>2024-04-13T09:08:24.566Z</updated>
    
    <content type="html"><![CDATA[<p>最近在工作上遇到的一個特殊的問題，當時為了找這個 bug 花了很久時間一直找不到，一直到同事發現透過 Chrome 開發者工具切換時區後才出現；只能說 Chrome dev tool 真的好用。</p><span id="more"></span><p>簡單描述一下問題狀況：</p><p>在使用了某個 3rd party library 的 DateRangePicker 來封裝成自己要使用的 component, 而選取後的日期以字串的格式回傳給上一層 component, 而上層 component 也可以傳入已選取的日期區間，所以需要可以解析日期區間的字串成為開始與結束兩個時間。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DateRange String: 03/01/2024 - 03/31/2024</span><br><span class="line"></span><br><span class="line">Start Date: 03/01/2024</span><br><span class="line">End Date: 03/31/2024</span><br></pre></td></tr></table></figure><p>但因為 DateRangePicker 接受的 value 格式是一個有 start, end 的物件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">start</span>: <span class="built_in">Date</span> | <span class="literal">undefined</span></span><br><span class="line">  <span class="attr">end</span>: <span class="built_in">Date</span> | <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以需要把上層傳入的字串，轉換成開始與結束日期的字串，再透過 <code>new Date()</code> 轉換為 <strong>Date</strong> 格式。但是我個人很不習慣美國的時間格式 <code>mm/dd/yyyy</code>，所以還是喜歡轉成 <code>yyyy-mm-dd</code> 的字串格式來處理。結果就因為這樣做，出現了奇怪的 bug。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">value = <span class="number">03</span>/<span class="number">01</span>/<span class="number">2024</span> - <span class="number">03</span>/<span class="number">31</span>/<span class="number">2024</span></span><br><span class="line">startDate = <span class="number">2024</span>-<span class="number">03</span>-<span class="number">01</span></span><br><span class="line">endDate = <span class="number">2024</span>-<span class="number">03</span>-<span class="number">31</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">start</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(startDate),</span><br><span class="line">  <span class="attr">end</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(endDate),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bug-重現的影片"><a href="#Bug-重現的影片" class="headerlink" title="Bug 重現的影片"></a>Bug 重現的影片</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/kuUsnaxp3dA" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="Bug-的原因"><a href="#Bug-的原因" class="headerlink" title="Bug 的原因"></a>Bug 的原因</h2><p>最主要的原因是，當使用 <code>new Date()</code> 傳入 dateString 轉換時，遇到 <code>yyyy-mm-dd</code> 的格式，會再根據使用者當地的 timezone 在轉換對應的時間。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e.g. 2024-03-01</span></span><br><span class="line">&gt; <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2024-03-01&#x27;</span>)</span><br><span class="line">&gt; Fri Mar <span class="number">01</span> <span class="number">2024</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span> GMT+<span class="number">0800</span> (台北標準時間)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Location switches to San Francisco</span></span><br><span class="line">&gt; <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2024-03-01&#x27;</span>)</span><br><span class="line">&gt; Thu Feb <span class="number">29</span> <span class="number">2024</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">00</span> GMT-<span class="number">0800</span> (Pacific Standard Time)</span><br></pre></td></tr></table></figure><p>這樣可以發現，當使用者時區在 GMT -01:00 ~ -11:00 的時候，轉換後的日期會少一天。</p><ol><li>父元件傳入的日期，轉換後少一天且設定到 DateRangePicker 元件上</li><li>觸發了 DateRangePicker 元件上 change 的事件</li><li>將少了一天的 date range 在傳給父元件</li><li>父元件收到新的 date range value 後，又更新日期區間再次傳入子元件</li><li>又回到步驟 1 的情況<br>所以在這樣的無窮迴圈下，可以看到日期不斷地倒數，似乎生命也在倒數了….XD</li></ol><p>可以到 <a href="https://stackblitz.com/edit/react-uf6nmy">stackblitz</a> 上查看範例，或是直接看 <a href="https://react-uf6nmy.stackblitz.io/">preview</a>，只是需要透過 Chrome Dev Tool 的 Sensor 來更換 Location，然後重整一下頁面檢查一下自己的 location 是否有切換成功。可以透過 <code>new Date().getTimezoneOffset()</code> 來檢查回傳的 timezone offset 如果大於 0，就表示切換成功可以來重現問題。<br><img src="https://i.imgur.com/GYyH0K7.png" alt="Chrome Dev Tool - Sensor"></p><h2 id="結論："><a href="#結論：" class="headerlink" title="結論："></a>結論：</h2><p>轉換時間的處理，可以的話再找個第三方套件來吧！不然就是使用 <code>new Date()</code> 時，乖乖地使用美國日期格式 <code>MM/dd/yyyy</code> 比較能避免意外狀況發生。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在工作上遇到的一個特殊的問題，當時為了找這個 bug 花了很久時間一直找不到，一直到同事發現透過 Chrome 開發者工具切換時區後才出現；只能說 Chrome dev tool 真的好用。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="javascript" scheme="https://soarlin.github.io/tags/javascript/"/>
    
    <category term="Date" scheme="https://soarlin.github.io/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>自製 Chrome Extension - 英文單字本</title>
    <link href="https://soarlin.github.io/2023/08/06/chrome-extension-side-project/"/>
    <id>https://soarlin.github.io/2023/08/06/chrome-extension-side-project/</id>
    <published>2023-08-06T05:47:35.000Z</published>
    <updated>2023-08-06T08:24:45.050Z</updated>
    
    <content type="html"><![CDATA[<p>最近又開始在用單字 App 在被單字，所以每每遇到一些容易忘記的單字，會想再找個地方記錄下來，即使之後再回顧的可能性不高，但是透過多做一次紀錄也可以增加一點印象。<br><img src="https://i.imgur.com/oLEhae3.png" alt="ChatGPT_Vocabulary"></p><span id="more"></span><p>原本是利用 ChatGPT 來幫忙產生單字表，包含了基本的單字、解釋以及例句。然後再把這次的表格丟到 Notion 的筆記裡面記錄下來，但是使用了一陣子後，還是覺得有些不方便。有時候時間久了會記錄到重複的單字，以及每次都要切換到 ChatGPT 問完後，再把表格複製到 Notion 上貼上有些繁瑣。</p><p><img src="https://i.imgur.com/ALuQz24.png" alt="Notion_Vocabulary"></p><p>想到之前參加過 <a href="https://vuejsforge.com/episode-3">VUE.JS FORGE 3</a> 的活動，雖然活動在半夜沒有辦法所有內容都看完，不過也從中學到一些不錯的知識。其中印象最深刻的大概就是怎麼使用 OpenAI 的 API 吧！雖然這是可以自己去 OpenAI 的官方文件上找來看，不過在完全沒概念的情況下，藉由活動的幫助來學習，有個完整的範例程式以及有人手把手線上教學，確實可以比較快進入狀況。</p><p>所以就想說自己來做一個 Chrome 插件吧！讓我遇到記不住的英文單字時，可以很方便地透過這個插件來查詢並且記錄下來。類似原本的做法，不過是更便捷的操作流程，並且將這些單字整理到同一份表格裡，有了基本概念後，就開始想著要怎麼實踐這構想。</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p>要實作這個插件，除了產生單字表內容需要使用 OpenAI 的 API 外，基本上會有幾個要考慮的點，一個是這些資料最終想存放在哪，是否有打算發布這個插件給大眾使用，實作上要用到哪些技術。從有了構想後，就會三不五時開始思考，假日有空就會開始做些相關研究。底下列出這次 side project 所用到的一些資訊。</p><ul><li>學習如何製作 Chrome Extension - <a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/">Development 文件</a></li><li>建立專案前端工具 - <a href="https://vitejs.dev/">Vite</a></li><li>前端專案框架 - React，剛好那陣子的工作是協助 React 專案的一些需求開發</li><li>前端元件庫 - <a href="https://mui.com/material-ui/getting-started/">Meterial UI</a></li><li>資料儲存 - <a href="https://firebase.google.com/docs/database/web/start?hl=zh-tw&authuser=0">Firebase</a></li><li>查詢單字以及產生例句 - <a href="https://platform.openai.com/docs/api-reference/introduction">OpenAI</a></li></ul><p>全部列出來看起來還不少東西要摸索學習，不過好在有些東西不是很複雜，加上我也沒有要做很複雜的功能，很多照著基本的 Getting Started Guide 就可以完成大部分工作了，剩下的自己在觸類旁通、舉一反三後，大致上也都可以很快解決，只是整個開發過程中，花費我最多時間的應該是 Firebase 的部分吧！</p><p>一開始想用 Firestore 來存取資料，但是照著教學文件實作了一陣子後，發現光是存取資料我就搞好久，不曉得是不是腦袋卡到陰還是怎麼了，花了不少時間在看文件以及嘗試，後來放棄了改用 Realtime Database，雖然文件也是讓我研究了許久，不過至少在讀取、寫入這基本的範例上可以順利操作，總算可以再繼續下去了。</p><p>先花了一個下午摸索如何製作 Chrome Extension 後，就決定還是該使用某個前端框架來開發，原本的工作主要負責專案是用 Vue.js，不過想多摸索一下 React，所以後來決定用 React + Meterial UI 來開發，因為這比較接近當時要協助公司其他專案的開發，而專案建置就選用 Vite 這個方便的工具，可以快速幫忙建立一個 React 專案，而且後續開發、編譯也都很方便。</p><p>而在查詢單字，反饋單字解釋以及給一個例句這部分，其實用到 OpenAI 的 API，也只用到基本的 Create completion 功能就可以達到我的要求了，只是要給出好的問句需要花些時間嘗試，而拿到的 response 也需要做些處理，但都還算是有跡可循，所以都比在 Firebase 上花的時間還少。</p><p>開發到後來想到了一些問題，Firebase 的使用其實是需要付費的，不過因為個人測試開發的使用量很低，通常不會到達要收費的門檻，加上可以透過一些 Local Cache 的方式來減少 request 的次數，進而在降低使用量。而使用 OpenAI 的 API 也是要收費的，用 OpenAI 來查單字這也是會累計 API 呼叫次數來產生費用，所以到目前雖然開發完成基本功能了，但是自己用到的次數也不高(想到要付錢就摳門的人)，基於以上兩個服務都可能會產生費用，加上當初設計時 Firebase 的 Realtime database 沒有區分不同表格，所以完全沒想將插件上架到 Chrome Extension Store 上，就單純自己做給自己用就好。</p><h3 id="Firebase-Realtime-Database-sample-code"><a href="#Firebase-Realtime-Database-sample-code" class="headerlink" title="Firebase - Realtime Database sample code"></a>Firebase - Realtime Database sample code</h3><p>這裡將這次 side project 用到跟 Firebase 相關的部分程式碼，簡單分享說明一下。專案裡在連到 Firebase Realtime Database 時用了一個檔案來讀取 config 檔案，之後就將整個 export 給後續需要呼叫 API 的程式使用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/plugins/firebase.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; getAuth, signInWithEmailAndPassword &#125; <span class="keyword">from</span> <span class="string">&#x27;firebase/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getDatabase &#125; <span class="keyword">from</span> <span class="string">&#x27;firebase/database&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apiKey = <span class="keyword">import</span>.meta.env.VITE_FIREBASE_API_KEK</span><br><span class="line"><span class="keyword">const</span> firebaseConfig = &#123;</span><br><span class="line">  <span class="attr">apiKey</span>: apiKey,</span><br><span class="line">  <span class="attr">authDomain</span>: <span class="string">&#x27;chrome-extension-vocabulary.firebaseapp.com&#x27;</span>,</span><br><span class="line">  <span class="attr">databaseURL</span>: <span class="string">&#x27;https://chrome-extension-vocabulary-default-rtdb.asia-southeast1.firebasedatabase.app&#x27;</span>,</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;chrome-extension-vocabulary&#x27;</span>,</span><br><span class="line">  <span class="attr">storageBucket</span>: <span class="string">&#x27;chrome-extension-vocabulary.appspot.com&#x27;</span>,</span><br><span class="line">  <span class="attr">messagingSenderId</span>: <span class="string">&#x27;198515381620&#x27;</span>,</span><br><span class="line">  <span class="attr">appId</span>: <span class="string">&#x27;1:198515381620:web:1202d73cd95bd03eeb0821&#x27;</span>,</span><br><span class="line">  <span class="attr">measurementId</span>: <span class="string">&#x27;G-KL9L2QB335&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize Firebase</span></span><br><span class="line"><span class="keyword">const</span> app = initializeApp(firebaseConfig)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> db = getDatabase(app)</span><br></pre></td></tr></table></figure><p>這裡希望單字可以依照加入的順序反向排序後回傳，所以新增資料時，加入了 timestamp，但是讀取資料時，找不到可以反向排序的讀取方式，所以才再後續做反向的處理再回傳，大致程式碼如下:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; db &#125; <span class="keyword">from</span> <span class="string">&#x27;../plugins/firebase&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, push, set, onValue, query, orderByChild &#125; <span class="keyword">from</span> <span class="string">&#x27;firebase/database&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Vocabulary &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ROOT_PATH = <span class="string">&#x27;Dictionary/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> writeData = <span class="function">(<span class="params">word: string, meaning: string, sentence: string</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> vocabulary: Vocabulary = &#123;</span><br><span class="line">    word, meaning, sentence,</span><br><span class="line">    <span class="attr">timestamp</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newWordRef = push(ref(db, ROOT_PATH))</span><br><span class="line">  set(newWordRef, vocabulary)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> readAllWords = <span class="keyword">async</span> (): <span class="built_in">Promise</span>&lt;Vocabulary[]&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dbRef = query(ref(db, ROOT_PATH), orderByChild(<span class="string">&#x27;timestamp&#x27;</span>))</span><br><span class="line">    onValue(dbRef,</span><br><span class="line">      <span class="function">(<span class="params">snapshot</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> records: <span class="built_in">Array</span>&lt;Vocabulary&gt; = []</span><br><span class="line">        <span class="keyword">const</span> data: <span class="built_in">Array</span>&lt;Vocabulary&gt; = <span class="built_in">Object</span>.values(snapshot.val())</span><br><span class="line">        data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123; records.unshift(item) &#125;)</span><br><span class="line">        resolve(records)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OpenAI-sample-code"><a href="#OpenAI-sample-code" class="headerlink" title="OpenAI sample code"></a>OpenAI sample code</h3><p>這邊是跟 OpenAI 有關的部分程式碼，簡單分享說明，專案裡在連到 OpenAI 時用了一個檔案來讀取 config 檔案，之後就將整個 export 給後續需要呼叫 API 的程式使用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/plugins/openai.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Configuration, OpenAIApi &#125; <span class="keyword">from</span> <span class="string">&#x27;openai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configuration = <span class="keyword">new</span> Configuration(&#123;</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="keyword">import</span>.meta.env.VITE_OPENAI_API_KEY</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> OpenAIApi(configuration)</span><br></pre></td></tr></table></figure><p>呼叫 API，只用到一個基本的 createChatCompletion</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openai <span class="keyword">from</span> <span class="string">&#x27;../plugins/openai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> lookUpWord = <span class="keyword">async</span> (word: string) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="string">`我要查詢個單字&#x27;<span class="subst">$&#123;word&#125;</span>&#x27;`</span></span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> openai.createChatCompletion(&#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class="line">    <span class="attr">messages</span>: [</span><br><span class="line">      &#123; <span class="attr">role</span>: <span class="string">&#x27;system&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;You are an English dictionary&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span>, content &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而回傳的資料結構大致像這樣，實際會用到的是 <code>choices[0].message.content</code> 的內容，所以還是要花點時間確認資料結果。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;chatcmpl-123&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;object&quot;</span>: <span class="string">&quot;chat.completion&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;created&quot;</span>: <span class="number">1677652288</span>,</span><br><span class="line">  <span class="attr">&quot;choices&quot;</span>: [&#123;</span><br><span class="line">    <span class="attr">&quot;index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;\n\nHello there, how may I assist you today?&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;finish_reason&quot;</span>: <span class="string">&quot;stop&quot;</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">&quot;usage&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prompt_tokens&quot;</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="attr">&quot;completion_tokens&quot;</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">&quot;total_tokens&quot;</span>: <span class="number">21</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後會附上這次專案的 Github 位置，詳細的內容可以再上去查看。</p><p>這裡附上幾個截圖</p><ul><li>基本 extension 點開時的畫面<br><img src="https://i.imgur.com/xOBQWLzh.png" alt="Extension View"></li><li>查詢單字時，連帶篩選既有的單字庫<br><img src="https://i.imgur.com/B9UQPVDh.png" alt="Extension with filter"></li><li>查詢單字後，回傳解釋與例句，使用者可以做基本調整並決定是否加入生字簿<br><img src="https://i.imgur.com/dghQ22Bh.png" alt="Extension Vocabulary"></li><li>新增單字後畫面，在單字書上多了剛剛新增的結果<br><img src="https://i.imgur.com/GaqL9cth.png" alt="Extension View 2"></li></ul><h2 id="Github-Repo"><a href="#Github-Repo" class="headerlink" title="Github Repo"></a>Github Repo</h2><ul><li><a href="https://github.com/SoarLin/chrome-extension-vocabulay">Chrome Extension - Vocabulary</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近又開始在用單字 App 在被單字，所以每每遇到一些容易忘記的單字，會想再找個地方記錄下來，即使之後再回顧的可能性不高，但是透過多做一次紀錄也可以增加一點印象。&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/oLEhae3.png&quot; alt=&quot;ChatGPT_Vocabulary&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="Chrome Extension" scheme="https://soarlin.github.io/tags/Chrome-Extension/"/>
    
    <category term="React" scheme="https://soarlin.github.io/tags/React/"/>
    
    <category term="OpenAI" scheme="https://soarlin.github.io/tags/OpenAI/"/>
    
  </entry>
  
  <entry>
    <title>Tuxera NTFS mounting error - kDAReturnExclusiveAccess</title>
    <link href="https://soarlin.github.io/2023/07/28/Tuxera-NTFS-mount-error/"/>
    <id>https://soarlin.github.io/2023/07/28/Tuxera-NTFS-mount-error/</id>
    <published>2023-07-28T11:37:15.000Z</published>
    <updated>2023-08-06T07:37:16.704Z</updated>
    
    <content type="html"><![CDATA[<p>最近幾週開始發現之前花錢買的 <strong>MICROSOFT NTFS FOR MAC</strong> 這套軟體，常常掛載了外接硬碟後，卻變成只能讀取無法寫入，之前試著重新下載安裝程式重裝＋重開機，確實有恢復過幾次，不過最近幾次想寫入外接硬碟就發現怎麼試都無效了。</p><span id="more"></span><p>本來想去官網上的 Support 找看看有沒有答案或著有沒有售後服務的方式可以聯繫請對方幫忙處理，好歹當初也是花錢買的軟體，為了裝這軟體還得先學會怎麼重開機近入開機選項去調整系統安全性後才能順利安裝軟體</p><p>How to install Microsoft NTFS for Mac by Tuxera 2021 (with macOS Monterey support)<br>Youtube: <a href="https://youtu.be/J8rn0skFJfs">https://youtu.be/J8rn0skFJfs</a></p><p>在試著重新卸載外接硬碟 -&gt; 重新掛載外接硬碟後，這時候就會出現類似底下的錯誤訊息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error while mounting disk6s1: kDAReturnExclusiveAccess</span><br></pre></td></tr></table></figure><p>拿著關鍵字去查了 google，也只是知道了這是 Apple Developer 裡面寫道的一個 function</p><p><img src="https://i.imgur.com/aK2Bh9S.png" alt="tuxera-mounting-error"></p><p>好在找到一篇一樣使用 Tuxera NTFS 遇到問題的文章，雖然問題不同，不過情況很相似，都是掛載外接硬碟時會報錯。</p><blockquote><p><a href="https://tp.miaosuwulimi.cn/w/383.html">系统更新后，无法在 macOS Catalina 上挂载 NTFS 卷</a></p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>雖然不確定原因是否也是因為 MacOS 更新了之後造成的問題，不過根據該篇文章的方式實際操作後，外接硬碟掛載後又可以寫入了，也算是解決的目前的問題。</p><h3 id="Manually-mount-the-disk"><a href="#Manually-mount-the-disk" class="headerlink" title="Manually mount the disk"></a>Manually mount the disk</h3><p>請先透過 Tuxera 的 Disk Manager 將外接硬碟卸載，接著打開終端機(Terminal)，手動建立掛載點</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir /Volumes/MyDisk</span><br></pre></td></tr></table></figure><p>接著可使用 <code>diskutil list</code> 來找出目前掛在硬碟的標示號，我的目前是 <strong>disk6s1</strong></p><p><img src="https://i.imgur.com/IWDskfC.png" alt="diskutil list"></p><p>最後，透過 Tuxera 的程式手動掛載硬碟到剛剛新增的掛載點 (記得更換掉 <strong>disk6s1</strong> 成自己的硬碟標示號)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /Library/Filesystems/tuxera_ntfs.fs/Contents/Resources/mount_tuxera_ntfs -o nodev -o noowners -o nosuid /dev/disk6s1 /Volumes/MyDisk</span><br></pre></td></tr></table></figure><p>接下來就可以透過 Finder 讀寫這個外接硬碟了</p><p>如果有多個外接硬碟，那就…自己新增多個掛載點，然後一個一個手動掛載過去<br>另外，最好將這些操作另外寫一個 shell script 檔，好讓你每次發現無法寫入外接硬碟時可以快點操作的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; vi automount.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 底下為參考的 shell script 內容，如果有多個就重複 mkdir 以及 mount 的指令吧</span></span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">mkdir mkdir /Volumes/MyDisk</span><br><span class="line">/Library/Filesystems/tuxera_ntfs.fs/Contents/Resources/mount_tuxera_ntfs -o nodev -o noowners -o nosuid /dev/disk6s1 /Volumes/MyDisk</span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將 .sh 檔改為可執行權限</span></span><br><span class="line">&gt; chmod a+x automount.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行時，記得加上 sudo 並且輸入 Administration 的密碼</span></span><br><span class="line">&gt; sudo sh automount.sh</span><br></pre></td></tr></table></figure><p>當然還是希望 Tuxera 團隊可以早點解決這問題，不然也不是每個買這軟體的人都還會操作終端機，做這些工程化的操作。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://tp.miaosuwulimi.cn/w/383.html">系统更新后，无法在 macOS Catalina 上挂载 NTFS 卷</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近幾週開始發現之前花錢買的 &lt;strong&gt;MICROSOFT NTFS FOR MAC&lt;/strong&gt; 這套軟體，常常掛載了外接硬碟後，卻變成只能讀取無法寫入，之前試著重新下載安裝程式重裝＋重開機，確實有恢復過幾次，不過最近幾次想寫入外接硬碟就發現怎麼試都無效了。&lt;/p&gt;</summary>
    
    
    
    <category term="macOS" scheme="https://soarlin.github.io/categories/macOS/"/>
    
    
    <category term="NTFS" scheme="https://soarlin.github.io/tags/NTFS/"/>
    
    <category term="Tuxera" scheme="https://soarlin.github.io/tags/Tuxera/"/>
    
  </entry>
  
  <entry>
    <title>Style Hover and Disabled in React component</title>
    <link href="https://soarlin.github.io/2022/12/23/Use-inline-style-show-react-button-style/"/>
    <id>https://soarlin.github.io/2022/12/23/Use-inline-style-show-react-button-style/</id>
    <published>2022-12-23T14:02:07.000Z</published>
    <updated>2022-12-23T15:04:59.547Z</updated>
    
    <content type="html"><![CDATA[<p>今天處理了一個有點意思的東西，目前開發中的專案，由於按鈕顏色可以被使用者客製化，所以原本寫好的 hover, focus 與 disabled 的 CSS 樣式就無用武之地了。</p><h2 id="Original-SCSS-for-button"><a href="#Original-SCSS-for-button" class="headerlink" title="Original SCSS for button"></a>Original SCSS for button</h2><p>原本用 SCSS 寫的按鈕，大概會有像下面的樣式設定:</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$orange-color</span>: <span class="number">#ec7100</span>;</span><br><span class="line"><span class="variable">$white-color</span>: <span class="number">#fff</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ant-btn</span><span class="selector-class">.orange-btn</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$orange-color</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$white-color</span>;</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">5s</span>;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span>, &amp;<span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: darken(<span class="variable">$orange-color</span>, <span class="number">10%</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$white-color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:disabled</span>, &amp;<span class="selector-attr">[disabled]</span>, &amp;<span class="selector-attr">[disabled]</span><span class="selector-pseudo">:hover</span>, &amp;<span class="selector-attr">[disabled]</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: lighten(<span class="variable">$orange-color</span>, <span class="number">30%</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$white-color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是因為按鈕的背景色會從元件外再傳入使用者設定後的顏色，所以如果直接用 inline style 的方式覆蓋按鈕的背景色，這樣會讓原本辛辛苦苦寫的 hover, focus 以及 disabled 狀態的顏色變化都失效。</p><span id="more"></span><p>身為一個前端工程師，對於這種小小狀態變化還是會計較的，所以上網查了一下有沒有方法可以在 inline style 的寫法下，還可以有 hover 的效果，果然找到了這篇 <a href="https://stackabuse.com/how-to-style-hover-in-react/">How to Style Hover in React</a> 教學，所以我就舉一反三再去找到另一篇教怎麼用 js 來模擬 Sass/SCSS 中的 darken 與 lighten 的效果(<a href="https://natclark.com/tutorials/javascript-lighten-darken-hex-color/">Lighten or Darken Hex Color in JavaScript</a>)。雖然計算出來的數值可能不太一樣，不過已經可以達到想要的效果了。</p><h2 id="Detect-hover-in-React-Button"><a href="#Detect-hover-in-React-Button" class="headerlink" title="Detect hover in React Button"></a>Detect hover in React Button</h2><p>處理的專案使用了 Ant Design 這套元件庫，所以接下來的範例也會同樣使用 antd 來製作範例。</p><p>基本上需要新增一個參數來記錄 hover 狀態，接著再到按鈕上添加 <mark class="label info">onMouseEnter</mark> 與 <mark class="label info">onMouseLeave</mark> 來偵測並改變 hover 的狀態，大致會有下面的 code</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">(<span class="params">&#123; bgColor = <span class="string">&quot;#8d86c9&quot;</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [isHover, setIsHover] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onMouseEnter</span>=<span class="string">&#123;()</span> =&gt;</span> setIsHover(true)&#125;</span></span><br><span class="line"><span class="xml">      onMouseLeave=&#123;() =&gt; setIsHover(false)&#125;</span></span><br><span class="line"><span class="xml">    &gt;</span></span><br><span class="line"><span class="xml">      Click me</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lighten-and-Darken-Hex-Color"><a href="#Lighten-and-Darken-Hex-Color" class="headerlink" title="Lighten and Darken Hex Color"></a>Lighten and Darken Hex Color</h2><p>這邊要改變顏色就會用到剛剛另一個網頁的教學，我沒有仔細研究到底怎麼把 hexColor 轉乘 RGB 後再怎麼處理，不過大致上就是希望原本顏色變暗，第二個參數就用負數，希望顏色變亮，第二個參數就用正數</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shadeColor = <span class="function">(<span class="params">hexColor, magnitude</span>) =&gt;</span> &#123;</span><br><span class="line">  hexColor = hexColor.replace(<span class="string">`#`</span>, <span class="string">``</span>);</span><br><span class="line">  <span class="keyword">if</span> (hexColor.length === <span class="number">6</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> decimalColor = <span class="built_in">parseInt</span>(hexColor, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">let</span> r = (decimalColor &gt;&gt; <span class="number">16</span>) + magnitude;</span><br><span class="line">    r &gt; <span class="number">255</span> &amp;&amp; (r = <span class="number">255</span>);</span><br><span class="line">    r &lt; <span class="number">0</span> &amp;&amp; (r = <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> g = (decimalColor &amp; <span class="number">0x0000ff</span>) + magnitude;</span><br><span class="line">    g &gt; <span class="number">255</span> &amp;&amp; (g = <span class="number">255</span>);</span><br><span class="line">    g &lt; <span class="number">0</span> &amp;&amp; (g = <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> b = ((decimalColor &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x00ff</span>) + magnitude;</span><br><span class="line">    b &gt; <span class="number">255</span> &amp;&amp; (b = <span class="number">255</span>);</span><br><span class="line">    b &lt; <span class="number">0</span> &amp;&amp; (b = <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`#<span class="subst">$&#123;(g | (b &lt;&lt; <span class="number">8</span>) | (r &lt;&lt; <span class="number">16</span>)).toString(<span class="number">16</span>)&#125;</span>`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> hexColor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Display-hover-effect"><a href="#Display-hover-effect" class="headerlink" title="Display hover effect"></a>Display hover effect</h2><p>能夠正確取得 hover 狀態後，就在要寫入的 inline style 加入判斷來改變按鈕背景顏色。<br>而我希望 mouse hover 時，按鈕的背景色能加深一些些，所以用 <mark class="label success">shadeColor(bgColor, -30)</mark></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shadeColor = <span class="function">(<span class="params">hexColor, magnitude</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">(<span class="params">&#123; bgColor = <span class="string">&quot;#8d86c9&quot;</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [isHover, setIsHover] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> buttonStyle = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">    <span class="attr">borderWidth</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: isHover ? shadeColor(bgColor, -<span class="number">30</span>) : bgColor</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onMouseEnter</span>=<span class="string">&#123;()</span> =&gt;</span> setIsHover(true)&#125;</span></span><br><span class="line"><span class="xml">      onMouseLeave=&#123;() =&gt; setIsHover(false)&#125;</span></span><br><span class="line"><span class="xml">      style=&#123;buttonStyle&#125;</span></span><br><span class="line"><span class="xml">    &gt;</span></span><br><span class="line"><span class="xml">      Click me</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Display-disabled-status"><a href="#Display-disabled-status" class="headerlink" title="Display disabled status"></a>Display disabled status</h2><p>既然都能夠顯示 hover 效果了，遇到按鈕需要 disable 就可以依此類推的方式來寫。<br>在 disabled 狀態下，我希望按鈕背景色變淺變亮，所以用 <mark class="label success">shadeColor(bgColor, 70)</mark></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shadeColor = <span class="function">(<span class="params">hexColor, magnitude</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">(<span class="params">&#123; bgColor = <span class="string">&quot;#8d86c9&quot;</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isDisabled = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> [isHover, setIsHover] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> buttonStyle = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">    <span class="attr">borderWidth</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: isDisabled</span><br><span class="line">      ? shadeColor(bgColor, <span class="number">70</span>)</span><br><span class="line">      : isHover</span><br><span class="line">      ? shadeColor(bgColor, -<span class="number">30</span>)</span><br><span class="line">      : bgColor</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">disabled</span>=<span class="string">&#123;isDisabled&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onMouseEnter</span>=<span class="string">&#123;()</span> =&gt;</span> setIsHover(true)&#125;</span></span><br><span class="line"><span class="xml">      onMouseLeave=&#123;() =&gt; setIsHover(false)&#125;</span></span><br><span class="line"><span class="xml">      style=&#123;buttonStyle&#125;</span></span><br><span class="line"><span class="xml">    &gt;</span></span><br><span class="line"><span class="xml">      Click me</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>上面寫的程式碼只是部分而已，需要比較完整的範例可以到這裡來看 <a href="https://codesandbox.io/s/react-button-hover-diabled-inline-style-m2lil0?file=/src/App.js">demo</a>(請耐心等候畫面產生)</p><iframe src="https://codesandbox.io/embed/react-button-hover-diabled-inline-style-m2lil0?fontsize=14&hidenavigation=1&theme=dark" width="100%" height="500px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://stackabuse.com/how-to-style-hover-in-react/">How to Style Hover in React</a></li><li><a href="https://natclark.com/tutorials/javascript-lighten-darken-hex-color/">Lighten or Darken Hex Color in JavaScript</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天處理了一個有點意思的東西，目前開發中的專案，由於按鈕顏色可以被使用者客製化，所以原本寫好的 hover, focus 與 disabled 的 CSS 樣式就無用武之地了。&lt;/p&gt;
&lt;h2 id=&quot;Original-SCSS-for-button&quot;&gt;&lt;a href=&quot;#Original-SCSS-for-button&quot; class=&quot;headerlink&quot; title=&quot;Original SCSS for button&quot;&gt;&lt;/a&gt;Original SCSS for button&lt;/h2&gt;&lt;p&gt;原本用 SCSS 寫的按鈕，大概會有像下面的樣式設定:&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$orange-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ec7100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$white-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.ant-btn&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.orange-btn&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$orange-color&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$white-color&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;transition&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;5s&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;&lt;span class=&quot;selector-pseudo&quot;&gt;:hover&lt;/span&gt;, &amp;amp;&lt;span class=&quot;selector-pseudo&quot;&gt;:focus&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: darken(&lt;span class=&quot;variable&quot;&gt;$orange-color&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10%&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$white-color&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;&lt;span class=&quot;selector-pseudo&quot;&gt;:disabled&lt;/span&gt;, &amp;amp;&lt;span class=&quot;selector-attr&quot;&gt;[disabled]&lt;/span&gt;, &amp;amp;&lt;span class=&quot;selector-attr&quot;&gt;[disabled]&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:hover&lt;/span&gt;, &amp;amp;&lt;span class=&quot;selector-attr&quot;&gt;[disabled]&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:focus&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: lighten(&lt;span class=&quot;variable&quot;&gt;$orange-color&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30%&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$white-color&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但是因為按鈕的背景色會從元件外再傳入使用者設定後的顏色，所以如果直接用 inline style 的方式覆蓋按鈕的背景色，這樣會讓原本辛辛苦苦寫的 hover, focus 以及 disabled 狀態的顏色變化都失效。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="react" scheme="https://soarlin.github.io/tags/react/"/>
    
    <category term="antd" scheme="https://soarlin.github.io/tags/antd/"/>
    
    <category term="css" scheme="https://soarlin.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Implement Promise step by step</title>
    <link href="https://soarlin.github.io/2022/07/28/Implement-Promise-step-by-step/"/>
    <id>https://soarlin.github.io/2022/07/28/Implement-Promise-step-by-step/</id>
    <published>2022-07-28T05:07:33.000Z</published>
    <updated>2022-07-28T12:54:14.347Z</updated>
    
    <content type="html"><![CDATA[<p>在開始唸書後發現對於一些底層JS API的實現太不了解了，雖然已經會用這些API了，還是覺得需要多了解一下一些方法的實作方式。最近看到一篇在講如何逐步實現 Promise 這個物件。看了很久才開始慢慢理解，所以先來筆記，順便更新一下很久沒 update 的部落格文章。</p><p>接下來會用 JavaScript 來實現一個簡單的 Promise，且支援非同步(async)與 <mark class="label info">then</mark> 的鏈式呼叫使用。</p><h2 id="分析-Promise"><a href="#分析-Promise" class="headerlink" title="分析 Promise"></a>分析 Promise</h2><blockquote><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p></blockquote><p>透過MDN的文章，可以知道 Promise 物件用來表示一個即將完成(或失敗)的非同步操作，以及它所產生的值。</p><span id="more"></span><h3 id="Promise-狀態"><a href="#Promise-狀態" class="headerlink" title="Promise 狀態"></a>Promise 狀態</h3><ul><li><strong>pending</strong>(擱置) : 初始狀態</li><li><strong>fulfilled</strong>(實現) : 表示操作成功完成</li><li><strong>rejected</strong>(拒絕) : 表示操作失敗</li></ul><p>Promise 的狀態只能從 <mark class="label info">pending</mark> 變成 <mark class="label info">fulfilled</mark>，或者由 <mark class="label info">pending</mark> 變成 <mark class="label info">rejected</mark>，不會在 fulfilled 與 rejected 兩個狀態間變換，狀態一改變後就不會再改變了。</p><h3 id="Promise-建構函式中的參數"><a href="#Promise-建構函式中的參數" class="headerlink" title="Promise 建構函式中的參數"></a>Promise 建構函式中的參數</h3><p>Promise 的建構函式接收一個函式(executor)以及兩個參數(resolve, reject):</p><ul><li><strong>resolve</strong> : 成功完成後執行 <mark class="label info">resolve</mark> 已完成 Promise，而狀態從 <mark class="label info">pending</mark> 變為 <mark class="label info">fulfilled</mark> 並且觸發 <mark class="label info">then</mark> 方法中的 <mark class="label info">onFulfilled</mark></li><li><strong>reject</strong> : 失敗後執行 <mark class="label info">reject</mark> 來結束 Promise，狀態由 <mark class="label info">pending</mark> 變為 <mark class="label info">rejected</mark> 並且觸發 <mark class="label info">then</mark> 方法中的 <mark class="label info">onRejected</mark></li></ul><h3 id="then-方法中的回呼函式參數"><a href="#then-方法中的回呼函式參數" class="headerlink" title="then 方法中的回呼函式參數"></a>then 方法中的回呼函式參數</h3><mark class="label info">then</mark> 方法接收兩個參數:<ul><li>onFulfilled : 成功的回呼函式，接收一個參數，即 <mark class="label info">resolve</mark> 傳入的值</li><li>onRejected : 失敗的回呼函式，接收的一個參數，即 <mark class="label info">reject</mark> 傳入的值</li></ul><p>如果 Promise 狀態變為 <mark class="label info">fulfilled</mark>，就會執行成功的回呼函示 <mark class="label info">onFulfilled</mark>；如果 Promise 狀態變成 <mark class="label info">rejected</mark>，就會執行失敗的回呼函示 <mark class="label info">onRejected</mark>。</p><h2 id="實現-Promise"><a href="#實現-Promise" class="headerlink" title="實現 Promise"></a>實現 Promise</h2><h3 id="基礎-Promise"><a href="#基礎-Promise" class="headerlink" title="基礎 Promise"></a>基礎 Promise</h3><p>首先, <mark class="label info">constructor</mark> 接收一個函式參數 <mark class="label info">executor</mark>, 該函式又接收兩個參數，分別是 <mark class="label info">resolve</mark> 與 <mark class="label info">reject</mark>。<br>因此需要在 <mark class="label info">constructor</mark> 中創建 <mark class="label info">resolve</mark> 與 <mark class="label info">reject</mark> 函數，並傳入 <mark class="label info">executor</mark> 中:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著，Promise 會根據狀態，執行對應的回呼函示。從最開始的 <mark class="label info">pending</mark> 狀態，<mark class="label info">resolve</mark> 時狀態變成 <mark class="label success">fulfilled</mark>；當 <mark class="label info">reject</mark> 時狀態變成 <mark class="label success">rejected</mark>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Promise 狀態變更後，會觸發 <mark class="label info">then</mark> 方法中對應的回呼函示。如果狀態由 <mark class="label info">pending</mark> 變成 <mark class="label info">fulfilled</mark>, 則會觸發 <mark class="label success">onFulfilled</mark>並將接收的值傳入。如果狀態由 <mark class="label info">pending</mark> 變成 <mark class="label info">rejected</mark> 則會觸發 <mark class="label success">onRejected</mark>並將失敗的結過傳入。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      onRejected(<span class="built_in">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下來稍微測試一下目前的情況。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;resolved&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res), <span class="comment">// resolved</span></span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> reject(<span class="string">&#x27;rejected&#x27;</span>), <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p2.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res),</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err) <span class="comment">// rejected</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>結果會發現什麼也沒有輸出。這是因為 Promise 在執行 <mark class="label info">then</mark> 方法時，Promise 還處於 <mark class="label info">pending</mark> 狀態。所以 <mark class="label success">onFulfilled</mark> 與 <mark class="label success">onRejected</mark> 的回呼函式都沒被執行。</p><h3 id="支援非同步的-Promise"><a href="#支援非同步的-Promise" class="headerlink" title="支援非同步的 Promise"></a>支援非同步的 Promise</h3><p>為了支援非同步，需要先將 <mark class="label success">onFulfilled</mark> 與 <mark class="label success">onRejected</mark> 保存，等待 Promise 狀態發生變化，立刻執行對應的回呼函式。<br>這裡需注意，因為 Promise 可能被呼叫多次，所以使用陣列來保存(<mark class="label primary">onFulfilledArray</mark>, <mark class="label primary">onRejectedArray</mark>)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.onFulfilledArray = [];</span><br><span class="line">    <span class="built_in">this</span>.onRejectedArray = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onFulfilledArray.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onRejectedArray.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.onFulfilledArray.push(onFulfilled);</span><br><span class="line">      <span class="built_in">this</span>.onRejectedArray.push(onRejected);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      onRejected(<span class="built_in">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再來測試一下剛剛的程式碼</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;resolved&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res),  <span class="comment">// -&gt; 1s 後顯示 &#x27;resolved&#x27;</span></span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> reject(<span class="string">&#x27;rejected&#x27;</span>), <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p2.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res),</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)  <span class="comment">// -&gt; 2s 後顯示 &#x27;rejected&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是如果改執行下面測試，就會出錯了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;resolved&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res),</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">).then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res),</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">); <span class="comment">// Uncaught TypeError: Cannot read properties of undefined (reading &#x27;then&#x27;)</span></span><br></pre></td></tr></table></figure><p>這是因為第一個 <mark class="label info">then</mark> 方法並沒有返回任何值，卻又遭到第二次呼叫 <mark class="label info">then</mark> 方法。</p><p>所以，接下來要來實現 <mark class="label info">then</mark> 的鏈式呼叫。</p><h3 id="支援-then-鏈式呼叫的-Promise"><a href="#支援-then-鏈式呼叫的-Promise" class="headerlink" title="支援 then 鏈式呼叫的 Promise"></a>支援 then 鏈式呼叫的 Promise</h3><p>想要 Promise 支援 <mark class="label info">then</mark> 鏈式呼叫，<mark class="label info">then</mark> 方法需要返回一個新的 Promise。</p><p>所以需要調整一下 <mark class="label info">then</mark> 方法，來回傳一個新的 Promise。等上一個 Promise 的 <mark class="label success">onFulfilled</mark> 或是 <mark class="label success">onRejected</mark> 回傳函式執行完，再執行新的 Promise 的 <mark class="label info">resolve</mark> 或 <mark class="label info">reject</mark> 函數。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...略</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onFulfilledArray.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> fulfilledFromLastPromise = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">            resolve(fulfilledFromLastPromise);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onRejectedArray.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> rejectedFromLastPromise = onRejected(<span class="built_in">this</span>.value);</span><br><span class="line">            reject(rejectedFromLastPromise);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> fulfilledFromLastPromise = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">          resolve(fulfilledFromLastPromise);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> rejectedFromLastPromise = onRejected(<span class="built_in">this</span>.value);</span><br><span class="line">          reject(rejectedFromLastPromise);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著使用下面的測試程式來測試</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;resolved&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// -&gt; 1s 後顯示 resolved</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">).then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res), <span class="comment">// -&gt; 接著再顯示 resolved</span></span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> reject(<span class="string">&#x27;rejected&#x27;</span>), <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p2.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res),</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// -&gt;  2s 後顯示 rejected</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;rejected&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">).then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res),</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err) <span class="comment">// -&gt; 接著再顯示 Error: rejected</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果再將測試的程式改寫如下，會發現第二個 <mark class="label info">then</mark> 無法順利輸出 ‘resolved’，而是輸出了上一個 <mark class="label info">then</mark> 的 <mark class="label success">onFulfilled</mark> 回傳函式返回的 Promise。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;resolved 1&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// resolved</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;resolved 2&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">).then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res), <span class="comment">// MyPromise &#123;state: &quot;pending&quot;&#125;</span></span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>因為 <mark class="label success">onFulfilled</mark> / <mark class="label success">onRejected</mark> 回呼函式執行後，只是簡單的將結果傳入 resolve / reject 中執行，沒有考慮 <mark class="label success">onFulfilled</mark> / <mark class="label success">onRejected</mark> 執行完會回傳一個新的 Promise 的情況，所以第二次的 <mark class="label info">then</mark> 方法成功回呼函式直接輸出了上一次 <mark class="label info">then</mark> 方法的成功回呼函式中返回的 Promise，因此接下來要再想辦法解決這個問題。</p><p>先將剛剛的測試換種寫法，來幫助後續理解</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;resolved 1&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = p1.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> p3 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;resolved 2&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p3;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p2.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">console</span>.log(res),</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>裡面有三個 Promise:</p><ol><li>第一個 Promise: 通過 new 建構出來的 p1</li><li>第二個 Promise: 透過 p1 呼叫 then 方法回傳的 p2</li><li>第三個 Promise: 在 p1.then 後成功回傳的參數中返回的 p3</li></ol><p>現在遇到的問題是，在呼叫 p2.then 時，p3 還處於 pending 狀態。<br>所以如果想實現 p2.then 方法中的回傳函數能正確的輸出 p3 裡的 <mark class="label info">resolve</mark>/<mark class="label info">reject</mark> 之後的值，需要先等 p3 狀態變化後，才能將值回傳給 p2 中的 <mark class="label info">resolve</mark>/<mark class="label info">reject</mark>。換句話說，三個 Promise 的狀態改變先後順序應該是 p1 –&gt; p3 –&gt; p2。</p><p>所以再來調整 <mark class="label info">then</mark> 裏針對 <mark class="label success">onFulfilled</mark> 以及 <mark class="label success">onRejected</mark> 後的處理，檢查 <mark class="label success">onFulfilled</mark> 與 <mark class="label success">onRejected</mark> 後回傳的值，是否還是 Promise 物件，是的話再將當前的 <mark class="label info">resolve</mark> 與 <mark class="label info">reject</mark> 傳入該 Promise 物件的 <mark class="label info">then</mark> 方法中處理</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...略</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onFulfilledArray.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> fulfilledFromLastPromise = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fulfilledFromLastPromise <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">              fulfilledFromLastPromise.then(resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              resolve(fulfilledFromLastPromise);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onRejectedArray.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> rejectedFromLastPromise = onRejected(<span class="built_in">this</span>.value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rejectedFromLastPromise <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">              rejectedFromLastPromise.then(resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              resolve(rejectedFromLastPromise);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> fulfilledFromLastPromise = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (fulfilledFromLastPromise <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">            fulfilledFromLastPromise.then(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(fulfilledFromLastPromise);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> rejectedFromLastPromise = onRejected(<span class="built_in">this</span>.value);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (rejectedFromLastPromise <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">            rejectedFromLastPromise.then(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(rejectedFromLastPromise);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最終版的-Promise"><a href="#最終版的-Promise" class="headerlink" title="最終版的 Promise"></a>最終版的 Promise</h3><p>這樣就完成一個簡單的 Promise，且支援非同步以及 then 的鏈式呼叫處理。完整的程式碼如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.onFulfilledArray = [];</span><br><span class="line">    <span class="built_in">this</span>.onRejectedArray = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onFulfilledArray.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onRejectedArray.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn(value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onFulfilledArray.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> fulfilledFromLastPromise = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fulfilledFromLastPromise <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">              fulfilledFromLastPromise.then(resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              resolve(fulfilledFromLastPromise);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onRejectedArray.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> rejectedFromLastPromise = onRejected(<span class="built_in">this</span>.value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rejectedFromLastPromise <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">              rejectedFromLastPromise.then(resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              resolve(rejectedFromLastPromise);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> fulfilledFromLastPromise = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (fulfilledFromLastPromise <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">            fulfilledFromLastPromise.then(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(fulfilledFromLastPromise);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> rejectedFromLastPromise = onRejected(<span class="built_in">this</span>.value);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (rejectedFromLastPromise <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">            rejectedFromLastPromise.then(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(rejectedFromLastPromise);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h2><p>參考了好幾篇文章，但是最後選了一個來當程式碼的主要參照(<del>抄襲</del>)。<br><a href="https://segmentfault.com/a/1190000040088835">循序渐进实现Promise</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在開始唸書後發現對於一些底層JS API的實現太不了解了，雖然已經會用這些API了，還是覺得需要多了解一下一些方法的實作方式。最近看到一篇在講如何逐步實現 Promise 這個物件。看了很久才開始慢慢理解，所以先來筆記，順便更新一下很久沒 update 的部落格文章。&lt;/p&gt;
&lt;p&gt;接下來會用 JavaScript 來實現一個簡單的 Promise，且支援非同步(async)與 &lt;mark class=&quot;label info&quot;&gt;then&lt;/mark&gt; 的鏈式呼叫使用。&lt;/p&gt;
&lt;h2 id=&quot;分析-Promise&quot;&gt;&lt;a href=&quot;#分析-Promise&quot; class=&quot;headerlink&quot; title=&quot;分析 Promise&quot;&gt;&lt;/a&gt;分析 Promise&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;透過MDN的文章，可以知道 Promise 物件用來表示一個即將完成(或失敗)的非同步操作，以及它所產生的值。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="promise" scheme="https://soarlin.github.io/tags/promise/"/>
    
    <category term="javascript" scheme="https://soarlin.github.io/tags/javascript/"/>
    
    <category term="async" scheme="https://soarlin.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>Angular 服務與依賴注入</title>
    <link href="https://soarlin.github.io/2022/02/21/Angular-%E6%9C%8D%E5%8B%99%E8%88%87%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5/"/>
    <id>https://soarlin.github.io/2022/02/21/Angular-%E6%9C%8D%E5%8B%99%E8%88%87%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5/</id>
    <published>2022-02-21T15:25:40.000Z</published>
    <updated>2022-07-28T04:58:07.421Z</updated>
    
    <content type="html"><![CDATA[<p>今天在解掉了工作上遇到的問題後，也順便加深了對 Angular 的瞭解，主要是在 Service 以及 Dependency injection 的處理應用上。</p><p>雖然官方文件上都寫得清清楚楚，不過當初上手開發的時候，只有買一個線上課程，花一個週末的時間上完課就硬上了，不然公司有任務要做，沒有太多時間讓我慢慢熟悉這個新的前端開發框架，所以在同事的推薦下，花了一些錢買了 Udemy 上的課程 「<a href="https://www.udemy.com/course/angular-zero/">Angular 開發實戰：從零開始</a>」，這是業界有名的保哥開的課程，很快的讓我就能夠上手，剩下的就是參考目前專案內其他類似的程式碼了。</p><span id="more"></span><p>而這次遇到的問題，再花了很久時間 debug 後發現是使用到的某個服務，在某些情況下會保留前一次某列表的搜尋參數資料，然後在下次到另一個列表時，會再把先前的參數帶入，造成不必要的 filter，而 query 不出原本預期的結果。一開始先使用 workaround 的方式在每次要進行 query 前，重新把不必要的參數清空，確實可以解決問題，但是這樣無法滿足人類想探求真理的心。</p><p>因為這種會多帶參數的情況，在某頁面的五個 tab 下，有三個頁面的列表會出現這情況，另外兩個則不會。所以就根據這樣的線索來找差異性。後來發現似乎在 <code>@Component</code> 裡面，兩者差了一個 <code>providers</code>，在試著把有問題的三個列表用同樣的方式加上 <code>providers</code> 就可以解決問題。</p><p>所以底下就來介紹一下 Service 以及 Dependency injection 的關聯。</p><blockquote><p>官方文件：<a href="https://angular.tw/guide/architecture-services">服務與依賴注入簡介</a></p></blockquote><h3 id="開發-Service-註冊與使用方式"><a href="#開發-Service-註冊與使用方式" class="headerlink" title="開發 Service 註冊與使用方式"></a>開發 Service 註冊與使用方式</h3><p>在 Angular 下，如果要將一個 Class 撰寫成可以被重複使用的 Service，那就在撰寫的時候，將這個 Class 上方加入 <code>@Injectable()</code> 這個裝飾器，然後在特定的 NgModule 內註冊使用，這樣就可以在其他 Component 中透過在 <code>constructor</code> 內加入這 Service 就能夠注入使用。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hero.service.ts</span></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> heroes: Hero[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getHeroes</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.heroes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    HeroService,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hero-list.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroListComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> heroService: HeroService</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ngOnInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這種寫法，會讓 Server 在還沒初始化時，新增一個 instance 後回傳給 component 來使用。如果已經初始化過了，就會回傳已經存在的 instance。所以當不同 Component 都使用這樣的方式來注入 Service 時，就會用到 Service 內<strong>相同的 heros 屬性</strong>。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if heroService is not existed, it will new an instance of HeroService</span></span><br><span class="line"><span class="comment">// if heroService is exist, it will use the same instance of HeroService</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> service: HeroService</span>)</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="每個-Component-使用新的-Service-instance"><a href="#每個-Component-使用新的-Service-instance" class="headerlink" title="每個 Component 使用新的 Service instance"></a>每個 Component 使用新的 Service instance</h3><p>如果在不同的 Component 中，要注入一個新的 Service 的 instance，就要在 <code>@Component()</code> 裡面使用 <code>providers</code> 屬性來註冊 Service，這時候就會替這個 Component 產生一個新的 Service instance。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hero-list.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>:    <span class="string">&#x27;app-hero-list&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./hero-list.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">providers</span>:  [ HeroService ] <span class="comment">// force to new an instance of HeroService</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroListComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> heroService: HeroService</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ngOnInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建立-Singleton-Service"><a href="#建立-Singleton-Service" class="headerlink" title="建立 Singleton Service"></a>建立 Singleton Service</h3><p>另外，如果 Service 需要使用到 Singelton 模式，就是在 <code>@Injectable()</code> 裡面加入 <code>providedIn: &#39;root&#39;</code>，這樣就會在 App Module 中生成一個 Singelton instance，並且在其他 Component 中也可以直接使用。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hero.service.ts</span></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> heroes: Hero[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getHeroes</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.heroes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至於如果已經在 <code>@Injectable</code> 裡面加上 <code>providedIn: &#39;root&#39;</code>，而在 Component 使用時，又用上 <code>providers</code> 屬性，我目前還沒這樣做過，不過我猜 Singleton 應該就失效了，畢竟強迫要新增一個 instance 了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在解掉了工作上遇到的問題後，也順便加深了對 Angular 的瞭解，主要是在 Service 以及 Dependency injection 的處理應用上。&lt;/p&gt;
&lt;p&gt;雖然官方文件上都寫得清清楚楚，不過當初上手開發的時候，只有買一個線上課程，花一個週末的時間上完課就硬上了，不然公司有任務要做，沒有太多時間讓我慢慢熟悉這個新的前端開發框架，所以在同事的推薦下，花了一些錢買了 Udemy 上的課程 「&lt;a href=&quot;https://www.udemy.com/course/angular-zero/&quot;&gt;Angular 開發實戰：從零開始&lt;/a&gt;」，這是業界有名的保哥開的課程，很快的讓我就能夠上手，剩下的就是參考目前專案內其他類似的程式碼了。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="Angular" scheme="https://soarlin.github.io/tags/Angular/"/>
    
    <category term="dependency injection" scheme="https://soarlin.github.io/tags/dependency-injection/"/>
    
  </entry>
  
  <entry>
    <title>Git 更改舊的 commit 訊息</title>
    <link href="https://soarlin.github.io/2021/08/31/Git-%E6%9B%B4%E6%94%B9%E8%88%8A%E7%9A%84-commit-%E8%A8%8A%E6%81%AF/"/>
    <id>https://soarlin.github.io/2021/08/31/Git-%E6%9B%B4%E6%94%B9%E8%88%8A%E7%9A%84-commit-%E8%A8%8A%E6%81%AF/</id>
    <published>2021-08-31T08:47:46.000Z</published>
    <updated>2022-07-28T04:58:07.422Z</updated>
    
    <content type="html"><![CDATA[<p>記錄一下怎麼使用 git 指令來修改舊的 commit 訊息。</p><h1 id="修改當前-commit-訊息"><a href="#修改當前-commit-訊息" class="headerlink" title="修改當前 commit 訊息"></a>修改當前 commit 訊息</h1><p>這應該是最基本的指令，透過 <code>--amend</code> 來修改當前的 commit 訊息。<br>可以一行指令來直接更新成新的 commit 內容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit --amend -m <span class="string">&quot;New commit message.&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>或是執行下面的指令來進入 git 編輯模式更改原本的 commit 訊息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h1 id="修改歷史-commit-訊息"><a href="#修改歷史-commit-訊息" class="headerlink" title="修改歷史 commit 訊息"></a>修改歷史 commit 訊息</h1><p>如果目前的情況是，想要修改之前某一筆 commit 的訊息，就得用 <code>git rebase -i HEAD~N</code> 的方式來修改了。其中的 N 是要修改的 commit 數量，所以如果要改的是之前的第四筆資料，就是 <code>git rebase -i HEAD~4</code>。這時會出現類似下面的畫面：<br>這時會將 <mark class="label success">HEAD~4</mark> 到 <mark class="label success">HEAD</mark> 的訊息列出，就是<mark class="label danger">最後四筆 commit 倒序列出來</mark>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase -i HEAD~4</span><br><span class="line">pick 873dfac Rename file name</span><br><span class="line">pick f7f3f6d Change my name a bit</span><br><span class="line">pick 310154e Update README formatting and add blame</span><br><span class="line">pick a5f4a0d Add cat-file</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 710f0f8..a5f4a0d onto 710f0f8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick &lt;commit&gt; = use commit</span></span><br><span class="line"><span class="comment"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class="line"><span class="comment"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class="line"><span class="comment"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class="line"><span class="comment"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class="line"><span class="comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br><span class="line"><span class="comment"># .       create a merge commit using the original merge commit&#x27;s</span></span><br><span class="line"><span class="comment"># .       message (or the oneline, if no original merge commit was</span></span><br><span class="line"><span class="comment"># .       specified). Use -c &lt;commit&gt; to reword the commit message.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接著找到要修改的 commit 訊息後，將前方的 pick 更換成 reword，後存檔離開。</p><blockquote><p>pick 873dfac Rename file name</p><mark class="label primary">reword</mark> f7f3f6d Change my name a bit<p>pick 310154e Update README formatting and add blame</p><mark class="label primary">reword</mark> a5f4a0d Add cat-file</blockquote><p>然後就會依序出現被選出來修改的 commit 的編輯畫面，這時候再進行修改即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Change my name a bit</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Add cat-file</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://linuxize.com/post/change-git-commit-message/">How to Change a Git Commit Message</a></li><li><a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">7.6 Git Tools - Rewriting History</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;記錄一下怎麼使用 git 指令來修改舊的 commit 訊息。&lt;/p&gt;
&lt;h1 id=&quot;修改當前-commit-訊息&quot;&gt;&lt;a href=&quot;#修改當前-commit-訊息&quot; class=&quot;headerlink&quot; title=&quot;修改當前 commit 訊息&quot;&gt;&lt;/a&gt;修改當前 commit 訊息&lt;/h1&gt;&lt;p&gt;這應該是最基本的指令，透過 &lt;code&gt;--amend&lt;/code&gt; 來修改當前的 commit 訊息。&lt;br&gt;可以一行指令來直接更新成新的 commit 內容&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git commit --amend -m &lt;span class=&quot;string&quot;&gt;&amp;quot;New commit message.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Server" scheme="https://soarlin.github.io/categories/Server/"/>
    
    
    <category term="Git" scheme="https://soarlin.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 透過 Travis CI deploy 到Github page 失敗的處理</title>
    <link href="https://soarlin.github.io/2021/08/29/Hexo%E9%80%8F%E9%81%8ETravis-CI-deploy%E5%88%B0Github-page%E5%A4%B1%E6%95%97%E7%9A%84%E8%99%95%E7%90%86/"/>
    <id>https://soarlin.github.io/2021/08/29/Hexo%E9%80%8F%E9%81%8ETravis-CI-deploy%E5%88%B0Github-page%E5%A4%B1%E6%95%97%E7%9A%84%E8%99%95%E7%90%86/</id>
    <published>2021-08-28T16:06:31.000Z</published>
    <updated>2022-07-28T04:58:07.422Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子一口氣把 Hexo 的版本從 3.9.0 升級到 5.4.0 後，又換了一個很潮的 Blog 佈景主題 <a href="https://theme-next.iissnan.com/">NexT</a>，不過我到現在也還沒花太多時間來客製化這個佈景，光是把佈景換好，設定檔修改到可以正常運作就花我好幾個小時了，之後應該再多花點時間來研究怎麼調整設定讓整個 blog 更好看(其實原本的主題就滿好看了)。</p><p>不過似乎在接下來就遇到一些令人頭大的問題，原本執行的好好的 Travis CI，開使無法順利發布到我的 github page了，原本的作法已經夠奇葩了，當初還忘了把參考資料記錄下來，現在看了有點霧煞煞，當初怎麼會寫這麼複雜的做法。後來雖然改到可以透過<code>hexo-deployer-git</code>這個套件配合 hexo 的 <code>_config.yml</code> 的設定，讓我能夠在本機端執行 <code>hexo deploy</code> 來發佈到 github page，可是想透過 Travis CI 來處理就會失敗。</p><span id="more"></span><p>原本就想說，好吧！看來只好這樣了。沒想到幾週後，不死心的我又繼續找解決方法，好不容易真的找到其他人有類似的問題，而且他也記錄下他的解決步驟，不過我認真看了一陣子後，發現超出我理解範圍了，還是再找看看其他人的解決方法吧。</p><blockquote><p><a href="https://jobbym.github.io/2020/07/30/%E4%BD%BF%E7%94%A8Travis-CI-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo-%E4%B9%8B%E5%90%8E%E7%BB%AD%E7%BB%B4%E6%8A%A4/">使用Travis CI 自动部署Hexo 之后续维护</a></p></blockquote><p>目前發布 blog 文章時，我用了兩個 github repo，一個單純用來寫文章的<code>hexo-github-blog</code>，在寫完文章後，透過 Travis CI 來重新產生靜態頁面、然後將產生好的 blog 資料夾 <code>.deploy_git</code>整包推到另一個 repo <code>soarlin.github.io</code> 上，這樣就可以讓我的 blog 在 github page 上面順利顯示了。</p><div class="note default">  <p>    大致流程：<mark class="label primary">hexo-github-blog</mark> >>> <mark class="label info">Travis CI</mark> >>> <mark class="label success">soarlin.github.io</mark>  </p></div><h1 id="錯誤-1-Permission-denied"><a href="#錯誤-1-Permission-denied" class="headerlink" title="錯誤 1. Permission denied"></a>錯誤 1. Permission denied</h1><p>Travis CI 推送至 github repo 遇到 Permission denied</p><p>而實際在 Travis CI 執行時，執行到 hexo deploy 確實會執行 hexo-deployer-git 設定好的行為，但是最後會出現錯誤，錯誤訊息如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning: Permanently added the RSA host key for IP address &#x27;140.82.112.4&#x27; to the list of known hosts.</span><br><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/home/travis/build/SoarLin/hexo-github-blog/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:314:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:276:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Done. Your build exited with 0.</span><br></pre></td></tr></table></figure><p>看起來是因為<code>Permission denied (publickey)</code>這個問題造成無法順利從 Travis CI 推送到 soarlin.github.io 上，但是最後依然顯示 <code>Done. Your build exited with 0.</code>所以 Travis CI 不會有 build fail 的訊息通知，結果就是 Blog 變成一片空白。</p><h2 id="解法-使用-github-token"><a href="#解法-使用-github-token" class="headerlink" title="解法: 使用 github token"></a>解法: 使用 github token</h2><p>Github 官方文件上有教學怎麼建立 token，可以來參考這篇文章<a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">Creating a personal access token</a>，但是在選擇權限範圍時，我想應該只要勾選<code>public_repo</code>這個應該就夠了，這樣已經可以存取 public repositories 了，如果還是不行，那至少把整個<code>repo</code>都勾選就好了。</p><ul><li><p>Step 1<br><img src="/images/github/github-token-1.png" alt="Settings"></p></li><li><p>Step 2<br><img src="/images/github/github-token-2.png" alt="Developer settings"></p></li><li><p>Step 3<br><img src="/images/github/github-token-3.png" alt="Personal access token"></p></li><li><p>Step 4<br><img src="/images/github/github-token-scope.png" alt="Select scopes"></p></li></ul><p>產生好 access token 後，請把他複製好到 Travis CI 上，找到你的專案，把 token 寫入專案設定中的環境變數，然後給定名稱就叫<code>GITHUB_TOKEN</code>吧，如下圖</p><p><img src="/images/tarvis-ci/add-env-variable.png" alt="Add Enviroment Variables"></p><p>然後再參考我的 .travis.yml 檔來寫吧！</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"> <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/next-theme/hexo-theme-next</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;Your name&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;your@email.com&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Deploy to Github Pages&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$&#123;GITHUB_TOKEN&#125;@$&#123;GH_PAGE_REPO&#125;&quot;</span> <span class="string">master:master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"> <span class="attr">global:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">GH_PAGE_REPO:</span> <span class="string">github.com/soarlin/soarlin.github.io</span></span><br></pre></td></tr></table></figure><p>同學照抄的時候，記得把名字跟 email 改成你自己的，另外這邊將要 push 的 repo 另外用一個變數來替代，這樣同學抄完作業後，要改路徑也比較方便。而最重要的是 <code>git push</code> 的 repo 帶著剛剛建立的 <code>access token</code>，這樣才能順利的 push 到 repo 裏面。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git push --force --quiet <span class="string">&quot;https://$&#123;GITHUB_TOKEN&#125;@$&#123;GH_PAGE_REPO&#125;&quot;</span> master:master</span><br></pre></td></tr></table></figure><h1 id="錯誤-2-No-layout"><a href="#錯誤-2-No-layout" class="headerlink" title="錯誤 2. No layout"></a>錯誤 2. No layout</h1><p>在 <code>hexo generate</code> 時，找不到 layout 頁面，造成無法正確產生 html 檔案，這樣就會出現錯誤訊息，如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">$ hexo generate</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> 2.18 s</span><br><span class="line">WARN  No layout: 404.html</span><br><span class="line">WARN  No layout: categories/index.html</span><br><span class="line">WARN  No layout: tags/index.html</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h2 id="解法-透過-git-clone-下載模板"><a href="#解法-透過-git-clone-下載模板" class="headerlink" title="解法: 透過 git clone 下載模板"></a>解法: 透過 git clone 下載模板</h2><p>而這個問題就比較快能夠推測到，就是雖然 package.json 裏面即使寫了佈景主題 <code>hexo-theme-next</code>，但是看起來在執行 <code>npm install</code> 時無法順利的安裝主題進來，這時候就改用 <code>git clone</code> 的方式，手動的提前將主題的檔案下載下來。</p><p>所以只需要在原本的 .travis.yml 檔案中加入下面的指令，就可以成功下載 NexT 的主題檔案，並在之後順利的產生 html 檔案了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/next-theme/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure><p>其實上方參考的 .travis.yml 已經加在 <code>before_install</code> 裏面了。</p><p>等我都改好這些後，總算能夠順利的將我的 blog 文章發布出去了，真是令人內牛滿面啊～</p><h1 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h1><ul><li><a href="https://www.dazhuanlan.com/lk0078/topics/1436211">测试travis 自动部署</a></li><li><a href="https://blog.csdn.net/woblog/article/details/51319364">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></li><li><a href="https://www.zhihu.com/question/38781463">hexo本地测试运行重启后页面空白,提示 : WARN No layout: index.html?</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前陣子一口氣把 Hexo 的版本從 3.9.0 升級到 5.4.0 後，又換了一個很潮的 Blog 佈景主題 &lt;a href=&quot;https://theme-next.iissnan.com/&quot;&gt;NexT&lt;/a&gt;，不過我到現在也還沒花太多時間來客製化這個佈景，光是把佈景換好，設定檔修改到可以正常運作就花我好幾個小時了，之後應該再多花點時間來研究怎麼調整設定讓整個 blog 更好看(其實原本的主題就滿好看了)。&lt;/p&gt;
&lt;p&gt;不過似乎在接下來就遇到一些令人頭大的問題，原本執行的好好的 Travis CI，開使無法順利發布到我的 github page了，原本的作法已經夠奇葩了，當初還忘了把參考資料記錄下來，現在看了有點霧煞煞，當初怎麼會寫這麼複雜的做法。後來雖然改到可以透過&lt;code&gt;hexo-deployer-git&lt;/code&gt;這個套件配合 hexo 的 &lt;code&gt;_config.yml&lt;/code&gt; 的設定，讓我能夠在本機端執行 &lt;code&gt;hexo deploy&lt;/code&gt; 來發佈到 github page，可是想透過 Travis CI 來處理就會失敗。&lt;/p&gt;</summary>
    
    
    
    <category term="CI/CD" scheme="https://soarlin.github.io/categories/CI-CD/"/>
    
    
    <category term="gulp" scheme="https://soarlin.github.io/tags/gulp/"/>
    
    <category term="Hexo" scheme="https://soarlin.github.io/tags/Hexo/"/>
    
    <category term="TravisCI" scheme="https://soarlin.github.io/tags/TravisCI/"/>
    
    <category term="Github" scheme="https://soarlin.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 3.9 升級到 4.0 後的寫法修正</title>
    <link href="https://soarlin.github.io/2021/08/28/Gulp-3-9%E5%8D%87%E7%B4%9A%E5%88%B04-0%E5%BE%8C%E7%9A%84%E5%AF%AB%E6%B3%95%E4%BF%AE%E6%AD%A3/"/>
    <id>https://soarlin.github.io/2021/08/28/Gulp-3-9%E5%8D%87%E7%B4%9A%E5%88%B04-0%E5%BE%8C%E7%9A%84%E5%AF%AB%E6%B3%95%E4%BF%AE%E6%AD%A3/</id>
    <published>2021-08-28T13:38:18.000Z</published>
    <updated>2022-07-28T04:58:07.422Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子在升級 Hexo 版本，後也心血來潮地把<code>Gulp</code>版本也升級了，印象中以前一直不敢升級到 4.0 以上，因為原本寫的<code>gulpfile</code>就沒辦法正常運作了，然後當時又沒太多時間研究該怎麼改寫，所以就拖著不理他。不過這次趁著有點空檔就研究了一下，發現沒有想像中的複雜，順利地被我改寫成功了，以此紀錄一下。</p><span id="more"></span><h1 id="Gulp-3-9-與-4-x-的差異"><a href="#Gulp-3-9-與-4-x-的差異" class="headerlink" title="Gulp 3.9 與 4.x 的差異"></a>Gulp 3.9 與 4.x 的差異</h1><h2 id="差異一-task-變成-function"><a href="#差異一-task-變成-function" class="headerlink" title="差異一: task 變成 function"></a>差異一: task 變成 function</h2><p>大致上原本使用<code>gulp.task</code>變成使用<code>function</code>來定義外，就是原本使用的<code>gulp.src</code>與<code>gulp.dest</code>直接變成<code>src</code>與<code>dest</code>了，要記得把<code>src</code>與<code>dest</code>給引入使用喔！</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// v3.9.1 寫法</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/css/*.css&#x27;</span>)</span><br><span class="line">        .pipe(sourcemaps.init())</span><br><span class="line">        .pipe(cssnano(&#123;</span><br><span class="line">            <span class="attr">zindex</span>: <span class="literal">false</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(sourcemaps.write(<span class="string">&#x27;maps/&#x27;</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public/css&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// v4.0.2 寫法</span></span><br><span class="line"><span class="comment">// 引入 src 和 dest</span></span><br><span class="line"><span class="keyword">var</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minifyCss</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> src(<span class="string">&#x27;./public/css/*.css&#x27;</span>)</span><br><span class="line">        .pipe(sourcemaps.init())</span><br><span class="line">        .pipe(cssnano(&#123;</span><br><span class="line">            <span class="attr">zindex</span>: <span class="literal">false</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(sourcemaps.write(<span class="string">&#x27;maps/&#x27;</span>))</span><br><span class="line">        .pipe(dest(<span class="string">&#x27;./public/css&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="差異二-default-執行多個任務變成使用-series"><a href="#差異二-default-執行多個任務變成使用-series" class="headerlink" title="差異二: default 執行多個任務變成使用 series"></a>差異二: default 執行多個任務變成使用 series</h2><p>原本使用的<code>gulp.task</code>來執行<code>default</code>的任務時，透過一個陣列來填入依序執行的 tasks，變成使用<code>exports.default</code>與<code>series</code>來執行多個 tasks，一樣要記得引入<code>series</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// v3.9.1 寫法</span></span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;minify-html&#x27;</span>,<span class="string">&#x27;minify-css&#x27;</span>,<span class="string">&#x27;minify-js&#x27;</span>,<span class="string">&#x27;images&#x27;</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// v4.0.2 寫法</span></span><br><span class="line"><span class="comment">// 引入 series, 跟前面一起引入 src 和 dest</span></span><br><span class="line"><span class="keyword">var</span> &#123; series, src, dest &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = series(minifyHtml, minifyCss, minifyJs, images);</span><br></pre></td></tr></table></figure><p>附上當初改好的版本，裡面還把舊的寫法都註解起來了<br><a href="https://github.com/SoarLin/hexo-github-blog/blob/e78634b03ac2512d524ed535745a1d9c2f45fe50/gulpfile.js">gulpfile.js</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前陣子在升級 Hexo 版本，後也心血來潮地把&lt;code&gt;Gulp&lt;/code&gt;版本也升級了，印象中以前一直不敢升級到 4.0 以上，因為原本寫的&lt;code&gt;gulpfile&lt;/code&gt;就沒辦法正常運作了，然後當時又沒太多時間研究該怎麼改寫，所以就拖著不理他。不過這次趁著有點空檔就研究了一下，發現沒有想像中的複雜，順利地被我改寫成功了，以此紀錄一下。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="gulp" scheme="https://soarlin.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>替不同專案設定Git Config</title>
    <link href="https://soarlin.github.io/2021/08/20/Setup-git-config-for-multiple-projects/"/>
    <id>https://soarlin.github.io/2021/08/20/Setup-git-config-for-multiple-projects/</id>
    <published>2021-08-20T03:19:31.000Z</published>
    <updated>2022-07-28T04:58:07.423Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到公司同仁分享針對不同專案設定 git config，覺得非常的受用，所以記錄一下。</p><p>開發環境描述：</p><ol><li>專案一使用的 Git 設定單純就只有 <code>user.name</code> 和 <code>user.email</code>，沒有其他額外的設定。<br>專案路徑：<code>/path/to/project1</code><br>gitconfig 路徑: <code>/Users/soar/.gitconfig-project1</code><br>gitconfig 內容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = Soar Lin</span><br><span class="line">email = soar.lin@gmail.com</span><br><span class="line">[core]</span><br><span class="line">editor = vim</span><br><span class="line">[color]</span><br><span class="line">ui = true</span><br></pre></td></tr></table></figure></li></ol><span id="more"></span><ol start="2"><li>專案二使用的 Git 設定除了上述的 <code>user.name</code> 和 <code>user.email</code> 外還有額外的設定，例如： <code>init.templatedir</code>與 <code>commit.template</code>。<br>專案路徑：<code>/path/to/project2</code><br>gitconfig 路徑: <code>/Users/soar/.gitconfig-project2</code><br>gitconfig 內容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = Soar Lin</span><br><span class="line">email = soar.lin@gmail.com</span><br><span class="line">[core]</span><br><span class="line">editor = vim</span><br><span class="line">[color]</span><br><span class="line">ui = true</span><br><span class="line">[init]</span><br><span class="line">    templatedir = /Users/soar/.git-templates</span><br><span class="line">[commit]</span><br><span class="line">    template = /Users/soar/.gitmessage.txt</span><br></pre></td></tr></table></figure></li></ol><h1 id="Method-1-使用-Git-的-includeIf-設定"><a href="#Method-1-使用-Git-的-includeIf-設定" class="headerlink" title="Method 1: 使用 Git 的 includeIf 設定"></a>Method 1: 使用 Git 的 includeIf 設定</h1><h2 id="Git版本需求"><a href="#Git版本需求" class="headerlink" title="Git版本需求"></a>Git版本需求</h2><ul><li>git version: v2.13+</li></ul><p>透過使用 git 本身提供的功能來根據專案目錄判斷選擇使用的 gitconfig 檔案。首先也是先寫好 <code>.gitconfig</code> 檔案，其中包含兩個不同專案的路徑與對應使用的 gitconfig 檔案。<br>這邊要注意的是 <code>.gitconfig</code> 檔案跟 <code>.gitconfig-project1</code> 和 <code>.gitconfig-project2</code> 檔案的路徑要一致。而這裡我都是放在我的使用者跟目錄(<code>/Users/soar</code>)下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[includeIf &quot;gitdir:/path/to/project1/&quot;]</span><br><span class="line">path = .gitconfig-project1</span><br><span class="line"></span><br><span class="line">[includeIf &quot;gitdir:/path/to/project2/&quot;]</span><br><span class="line">path = .gitconfig-project2</span><br></pre></td></tr></table></figure><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>這裡有個很重要的部分就是，在使用 includeIf 的時候，路徑的最後一定要加上 <code>/</code> 這個符號。來確定在 Linux 系統中能正確運作，如果是 Windows 系統，路徑最後一定要加上 <code>\</code> 這個符號。</p><p>這樣設定成功的話，之後在 Project 1 開發時，使用到的就會是基本的 git config 設定，而在 Project 2 開發時，在 commit 的時候就會把 <code>.gitmessage.txt</code> 設定的內容輸出到檔案中。</p><h1 id="Method-2-ZSH-下的解決方法"><a href="#Method-2-ZSH-下的解決方法" class="headerlink" title="Method 2: ZSH 下的解決方法"></a>Method 2: ZSH 下的解決方法</h1><h2 id="基本需求"><a href="#基本需求" class="headerlink" title="基本需求"></a>基本需求</h2><ul><li>有安裝 ZSH</li></ul><p>解決方式是透過新增指令讓使用者可以在快速的在 Console 中輸入新增的指令來切換使用的 git config。而指令就是先將不同的 gitconfig 檔各自寫好，每次透過指令來複寫 global 的 gitconfig 檔，其實有點暴力，但也不失為一種方法。<br>打開編輯 <code>.zshrc</code>，在最後面加上以下指令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function setproject1() &#123;</span><br><span class="line">alias cdw=&quot;cd /path/to/project1/&quot;</span><br><span class="line">cp -p ~/.gitconfig-project1 ~/.gitconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setproject2() &#123;</span><br><span class="line">alias cdw=&quot;cd /path/to/project2/&quot;</span><br><span class="line">cp -p ~/.gitconfig-project2 ~/.gitconfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事項-1"><a href="#注意事項-1" class="headerlink" title="注意事項"></a>注意事項</h2><p>這裡要<strong>注意</strong>的是，在 function 裏面的 <code>alias</code> 與 <code>cp</code> 前面不要有任何空白，不然執行指令時會出現 <code>command not found</code> 的錯誤。</p><p>然後套用更新後的 <code>.zshrc</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; source ~/.zshrc</span><br><span class="line"></span><br><span class="line">// 檢查你新增的指令</span><br><span class="line">&gt; which setproject1</span><br><span class="line">function setproject1() &#123;</span><br><span class="line">alias cdw=&quot;cd /path/to/project1/&quot;</span><br><span class="line">cp -p ~/.gitconfig-project1 ~/.gitconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 套用 project1 設定後檢查</span><br><span class="line">&gt; setproject1</span><br><span class="line">&gt; git config --list</span><br><span class="line"></span><br><span class="line">// 檢查你新增的指令</span><br><span class="line">&gt; which setproject2</span><br><span class="line">function setproject2() &#123;</span><br><span class="line">alias cdw=&quot;cd /path/to/project2/&quot;</span><br><span class="line">cp -p ~/.gitconfig-project2 ~/.gitconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 套用 project2 設定後檢查</span><br><span class="line">&gt; setproject2</span><br><span class="line">&gt; git config --list</span><br></pre></td></tr></table></figure><h1 id="Mothod3-使用-bash-shell-的解決方式"><a href="#Mothod3-使用-bash-shell-的解決方式" class="headerlink" title="Mothod3: 使用 bash shell 的解決方式"></a>Mothod3: 使用 bash shell 的解決方式</h1><p>最原始的解決方法，也是最<del>粗暴</del>基本的方式，使用的方式跟先前 zsh 的解法很類似，在 <code>.bashrc</code> 中加入以下方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function setproject1() &#123;</span><br><span class="line">  set cdw=&#x27;cd /path/to/project1/&#x27;</span><br><span class="line">  cp -p ~/.gitconfig-project1 ~/.gitconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setproject2() &#123;</span><br><span class="line">  set cdw=&#x27;cd /path/to/project2/&#x27;</span><br><span class="line">  cp -p ~/.gitconfig-project2 ~/.gitconfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著再套用更新後的 <code>.bashrc</code>來執行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 套用 .bashrc</span><br><span class="line">&gt; source ~/.bashrc</span><br><span class="line"></span><br><span class="line">// 執行剛才新增的方法1 &amp; 檢查 git config</span><br><span class="line">&gt; setproject1</span><br><span class="line">&gt; git config --list</span><br><span class="line"></span><br><span class="line">// 檢查宣告的方法1</span><br><span class="line">&gt; which setproject1</span><br><span class="line">&gt; declare -f setproject1</span><br><span class="line">function setproject1() &#123;</span><br><span class="line">  set cdw=&#x27;cd /path/to/project1/&#x27;</span><br><span class="line">  cp -p ~/.gitconfig-project1 ~/.gitconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 執行剛才新增的方法1 &amp; 檢查 git config</span><br><span class="line">&gt; setproject1</span><br><span class="line">&gt; git config --list</span><br><span class="line"></span><br><span class="line">// 檢查宣告的方法1</span><br><span class="line">&gt; which setproject1</span><br><span class="line">&gt; declare -f setproject1</span><br><span class="line">function setproject2() &#123;</span><br><span class="line">  set cdw=&#x27;cd /path/to/project2/&#x27;</span><br><span class="line">  cp -p ~/.gitconfig-project2 ~/.gitconfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上大概是這次公司內部同仁分享的三種做法，真是讓我豁然開朗，之前還傻傻地透過撰寫 <code>alias</code> 來重新設定需要的參數跟移除(unset)參數，但是這做法就是久了會出現許多垃圾在 gitconfig 裏面，如下面顯示的 <code>init</code> 與 <code>commit</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; vim .zshrc</span><br><span class="line"></span><br><span class="line">// add alias</span><br><span class="line">alias setproject1=&quot;git config --global init.templatedir \&quot;/Users/soar/.git-templates\&quot; &amp;&amp; git config --global commit.template \&quot;/Users/soar/.gitmessage.txt\&quot;&quot;</span><br><span class="line">alias setproject2=&quot;git config --global --unset commit.template &amp;&amp; git config --global --unset init.templatedir&quot;</span><br><span class="line"></span><br><span class="line">// apply zsh setting</span><br><span class="line">&gt; source .zshrc</span><br><span class="line"></span><br><span class="line">// check .gitconfig</span><br><span class="line">&gt; vim .gitconfig</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">name = Soar Lin</span><br><span class="line">email = soar.lin@gmail.com</span><br><span class="line">[core]</span><br><span class="line">editor = vim</span><br><span class="line">[color]</span><br><span class="line">ui = true</span><br><span class="line">[init]</span><br><span class="line">[commit]</span><br><span class="line">[init]</span><br><span class="line">[commit]</span><br><span class="line">[init]</span><br><span class="line">[commit]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天看到公司同仁分享針對不同專案設定 git config，覺得非常的受用，所以記錄一下。&lt;/p&gt;
&lt;p&gt;開發環境描述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;專案一使用的 Git 設定單純就只有 &lt;code&gt;user.name&lt;/code&gt; 和 &lt;code&gt;user.email&lt;/code&gt;，沒有其他額外的設定。&lt;br&gt;專案路徑：&lt;code&gt;/path/to/project1&lt;/code&gt;&lt;br&gt;gitconfig 路徑: &lt;code&gt;/Users/soar/.gitconfig-project1&lt;/code&gt;&lt;br&gt;gitconfig 內容&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[user]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	name = Soar Lin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	email = soar.lin@gmail.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[core]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	editor = vim&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[color]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ui = true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Server" scheme="https://soarlin.github.io/categories/Server/"/>
    
    
    <category term="Git" scheme="https://soarlin.github.io/tags/Git/"/>
    
    <category term="zsh" scheme="https://soarlin.github.io/tags/zsh/"/>
    
    <category term="bash" scheme="https://soarlin.github.io/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>透過 Webpack 傳入變數到 pug, scss 檔案內</title>
    <link href="https://soarlin.github.io/2021/04/09/Webpack%E5%82%B3%E5%85%A5%E8%AE%8A%E6%95%B8%E5%88%B0pug-scss%E6%AA%94%E6%A1%88/"/>
    <id>https://soarlin.github.io/2021/04/09/Webpack%E5%82%B3%E5%85%A5%E8%AE%8A%E6%95%B8%E5%88%B0pug-scss%E6%AA%94%E6%A1%88/</id>
    <published>2021-04-09T14:08:57.000Z</published>
    <updated>2022-07-28T04:58:07.425Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做前端切版的時候，遇到了一個以前沒注意到的問題，就是在本機端開發時，存取圖片或其他檔案都預設從根目錄開始找 (e.g. <code>/images/...</code>)，可是當專案開發完，要發佈到其他位置時，圖片等檔案的位置就會有所變更，這時候圖片的路徑就會找不到檔案了，必須要再手動調整過，當然不可能每次都手動一個一個改路徑。</p><p>所以開始著手研究怎麼把路徑的變數，透過 webpack 編譯階段判斷目前是開發環境，還是 production 環境，來改變圖片等檔案的前綴路徑。底下就以 <a href="https://github.com/SoarLin/pug-sass-template">pug-sass-template</a> 專案來說明幾個重要的步驟。</p><span id="more"></span><h2 id="Step-1-Webpack-Get-Environment-Variables"><a href="#Step-1-Webpack-Get-Environment-Variables" class="headerlink" title="Step 1 - Webpack Get Environment Variables"></a>Step 1 - Webpack Get Environment Variables</h2><blockquote><p>參考： <a href="https://webpack.js.org/guides/environment-variables/">https://webpack.js.org/guides/environment-variables/</a></p></blockquote><p>上面網址提供的範例在傳入參數時，一個與多個在接收時，其實有所不同，這邊也是踩了雷才注意到<br><strong>Webpack 版本 : 4.43.0</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 傳入兩組 env 時</span></span><br><span class="line">npx webpack --env NODE_ENV=local --env production --progress</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 webpack 內</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;env:&#x27;</span>, env); <span class="comment">// [ &#x27;NODE_ENV=local&#x27;, &#x27;production&#x27; ]</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Production: &#x27;</span>, env.production); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>傳入兩組 env 值的時候，所收到的 env 其實是一組陣列，各別是 <code>--env XXXXX</code> 裡面的 <code>XXXXX</code>，但是當傳入的只有一組 env 時，例如：<code>--env production</code>這時候 env 就是 <code>production</code> 這個值，就<strong>不再是陣列了</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 傳入一組 env 時</span></span><br><span class="line">npx webpack --env production --progress</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 webpack 內</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;env:&#x27;</span>, env); <span class="comment">// &#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>雖然目前 webpack 參考的頁面是 v5.31.0 版，可是沒特別寫出這個差異，讓我一直踩雷踩到懷疑人生了…</p><p>另外，可以也使用 mode 來傳入環境變數</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npx webpack --mode production --progress</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;options.mode:&#x27;</span>, options.mode); <span class="comment">// &#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Step-2-Pass-Variables-Into-PUG-files"><a href="#Step-2-Pass-Variables-Into-PUG-files" class="headerlink" title="Step 2 - Pass Variables Into PUG files"></a>Step 2 - Pass Variables Into PUG files</h2><blockquote><p>參考： <a href="https://www.npmjs.com/package/pug-html-loader">https://www.npmjs.com/package/pug-html-loader</a></p></blockquote><p>根據這個套件的說明，可以簡單地透過在 <code>options</code> 裡面加入 <code>data</code> 來將要傳入 pug 的變數傳進去即可。而 data 的格式，寫成 JSON 即可。結合一下上面的步驟一，就可以來調整圖片的前綴網址。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json 內的 scripts</span></span><br><span class="line">webpack --env production --mode production --config webpack.config.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _VARIABLES = &#123;</span><br><span class="line">    <span class="attr">IMG_PREFIX_URL</span>: (options.mode === <span class="string">&#x27;production&#x27;</span>) ? <span class="string">&#x27;https://soarlin.github.io/&#x27;</span> : <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> config = &#123;</span><br><span class="line">    <span class="attr">context</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">      <span class="attr">index</span>: <span class="string">&#x27;./js/index.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: ....,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">      <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&#x27;html-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">minimize</span>: (options.mode === <span class="string">&#x27;production&#x27;</span>) ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&#x27;pug-html-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">data</span>: _VARIABLES,</span><br><span class="line">                <span class="attr">pretty</span>: (options.mode === <span class="string">&#x27;production&#x27;</span>) ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        ....</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而到時候 pug 檔內，就可以讀到傳入的變數了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 接收變數</span><br><span class="line">- var imgPrefixUrl = IMG_PREFIX_URL</span><br><span class="line"></span><br><span class="line">// 套用在圖片上</span><br><span class="line">img.rounded-circle(src=imgPrefixUrl+&#x27;images/soarlin-avatar.jpg&#x27;, alt=&quot;avatar&quot;)</span><br></pre></td></tr></table></figure><h2 id="Step-3-Pass-Variables-Into-Sass-SCSS-files"><a href="#Step-3-Pass-Variables-Into-Sass-SCSS-files" class="headerlink" title="Step 3 - Pass Variables Into Sass/SCSS files"></a>Step 3 - Pass Variables Into Sass/SCSS files</h2><blockquote><p>參考： <a href="https://www.npmjs.com/package/sass-loader#additionaldata">https://www.npmjs.com/package/sass-loader#additionaldata</a></p></blockquote><p>雖然在 <a href="https://stackoverflow.com/questions/60058352/pass-webpack-environment-variable-to-scss-file">stack overflow</a> 上也有找到解答，可是上面的解答實際使用時有問題，後來是在 sass-loader npm 的頁面上找到正確的參數，可能是版本的關係產生的不同吧！</p><p>在 sass-loader 的 <code>options</code> 加入 <code>additionalData</code> 來傳入參數到 Sass/SCSS 檔內。而 additionalData 可使用字串或是函示，使用的方式在上述參考網址也有了，所以我就以我自己的範例來寫就好</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json 內的 scripts</span></span><br><span class="line">webpack --env production --mode production --config webpack.config.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _VARIABLES = &#123;</span><br><span class="line">    <span class="attr">IMG_PREFIX_URL</span>: (options.mode === <span class="string">&#x27;production&#x27;</span>) ? <span class="string">&#x27;https://soarlin.github.io/&#x27;</span> : <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> config = &#123;</span><br><span class="line">    <span class="attr">context</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">      <span class="attr">index</span>: <span class="string">&#x27;./js/index.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: ....,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">      <span class="attr">rules</span>: [</span><br><span class="line">        ...,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">          use: [</span><br><span class="line">            <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">additionalData</span>: <span class="string">&quot;$imgPrefix: &#x27;&quot;</span> + _VARIABLES.IMG_PREFIX_URL + <span class="string">&quot;&#x27;;&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        ....</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這樣似乎會將 additionalData 放在所有 Sass/SCSS 的最前方，讓它以變數的方式直接帶入 Sass/SCSS 內，所以就可以直接使用變數</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 傳入 $imgPrefix: _VARIABLES.IMG_PREFIX_URL</span></span><br><span class="line"><span class="selector-class">.item-bg</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="variable">$imgPrefix</span>+<span class="string">&#x27;images/background-0.jpg&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: center center;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上大概就是這在切版遇到的問題，為了找這些方法花了不少時間，所以非得好好紀錄一下，以供後人參考，減少走冤枉路。也讓自己以後可以拿來抄。</p><p>而文中寫到的範例程式，都可以到 Github 上的 <a href="https://github.com/SoarLin/pug-sass-template">pug-sass-template</a> 專案上找到，歡迎大家幫忙按顆星星。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在做前端切版的時候，遇到了一個以前沒注意到的問題，就是在本機端開發時，存取圖片或其他檔案都預設從根目錄開始找 (e.g. &lt;code&gt;/images/...&lt;/code&gt;)，可是當專案開發完，要發佈到其他位置時，圖片等檔案的位置就會有所變更，這時候圖片的路徑就會找不到檔案了，必須要再手動調整過，當然不可能每次都手動一個一個改路徑。&lt;/p&gt;
&lt;p&gt;所以開始著手研究怎麼把路徑的變數，透過 webpack 編譯階段判斷目前是開發環境，還是 production 環境，來改變圖片等檔案的前綴路徑。底下就以 &lt;a href=&quot;https://github.com/SoarLin/pug-sass-template&quot;&gt;pug-sass-template&lt;/a&gt; 專案來說明幾個重要的步驟。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="sass" scheme="https://soarlin.github.io/tags/sass/"/>
    
    <category term="webpack" scheme="https://soarlin.github.io/tags/webpack/"/>
    
    <category term="pug" scheme="https://soarlin.github.io/tags/pug/"/>
    
  </entry>
  
  <entry>
    <title>Vue 專案搭配 Vuesax / Element UI 開發筆記</title>
    <link href="https://soarlin.github.io/2020/11/08/vuejs-with-element-ui-development-note/"/>
    <id>https://soarlin.github.io/2020/11/08/vuejs-with-element-ui-development-note/</id>
    <published>2020-11-08T13:16:23.000Z</published>
    <updated>2022-07-28T04:58:07.427Z</updated>
    
    <content type="html"><![CDATA[<p>最近因為參加了公司舉辦的 hackathon，總算又有機會回來寫寫 Vue.js 了，太久沒寫真的生疏好多，加上最近 Angular 寫太多，再次回來寫 Vue 看到 .vue 檔裡面放著 template, script, style 覺得程式碼變得好長，不過好處是不用在 VSCode 裡面開一堆 .html, .ts, .scss 等檔案，透過 tab 找起檔案來會快一點點。</p><p>由於參加了兩組比賽，所以可以嘗試不同的東西，這次就找了兩套 UI Component 來搭配使用，一個是使用 <a href="https://vuesax.com/">Vuesax</a>，另一個則是使用 <a href="https://element.eleme.io/">Element</a>，先說結論吧！ Element 用起來比較舒服，除了文件有中文可以看，元件也比較多種可選擇。一開始選擇 Vuesax 時，覺得這套畫面感覺很生動，就選來試試看！但是遇到安裝了 3.x 版，卻找去 4.0 版的說明文件，結果一直覺得怪怪的，好一陣子後才發現。</p><span id="more"></span><p>不過 Vuesax 的 input 真的做得好精緻，除了有底線顏色、驗證狀態，還可以讓 placeholder 躍升變成 label，以及 checkbox 跟 switch 的一些畫面小動畫，感覺在表單製作上可以做得很精緻，在專案中用它建立了一個簡單的登入畫面覺得很滿意，可惜後來登入頁面被捨棄，沒辦法展現一下。不過實際上在使用 Vuesax 開發時，還是覺得看文件編開發卡卡的，可能還不太習慣用 UI Component 來開發吧！</p><p>後來另一個專案想說換一個玩看看，就選了 Element，發現這個真的好用很多，可能真的因為文件有中文的吧(先加100分)！實作上也覺得 Layout 跟 Container 比較快上手，也可能是經歷了之前一個套件的關係吧！而這次開發時，碰到了幾個小問題，一個是以前也碰過只是解法有點複雜的在 Vue 專案內讓每個元件可以引入共同的 Sass/SCSS 檔案，另一個則是因為用了 UI Component 後可能會遇到的問題，在寫 style 的時候，無法去客製化引用的 UI 元件，正確來說應該是寫的 css selector 無法複寫到元件內的樣式，底下就針對這兩個來記錄說明吧！</p><h2 id="開發環境紀錄"><a href="#開發環境紀錄" class="headerlink" title="開發環境紀錄"></a>開發環境紀錄</h2><ul><li>Node v12.18</li><li>npm 6.14.6</li><li>@vue/cli 4.5.6</li></ul><h2 id="Import-Sass-Scss-files-into-Every-Vue-Component"><a href="#Import-Sass-Scss-files-into-Every-Vue-Component" class="headerlink" title="Import Sass/Scss files into Every Vue Component"></a>Import Sass/Scss files into Every Vue Component</h2><p>參考文件 :</p><ol><li><a href="https://css-tricks.com/how-to-import-a-sass-file-into-every-vue-component-in-an-app/">How to Import a Sass File into Every Vue Component in an App</a></li><li><a href="https://medium.com/unalai/vue-%E5%B0%88%E6%A1%88%E4%B8%AD%E5%BC%95%E5%85%A5-scss-%E6%AA%94%E6%A1%88%E7%9A%84%E5%9B%9B%E7%A8%AE%E6%96%B9%E6%B3%95-%E8%A9%B2%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%91%A2-9babcd3a4ef1">Vue CLI 專案中引入 SCSS 檔案的四種方法，該如何使用呢？</a></li></ol><p>這邊忽略建立 Vue 專案的過程，直接進入重點：</p><h3 id="Install-Loader"><a href="#Install-Loader" class="headerlink" title="Install Loader"></a>Install Loader</h3><p>先安裝所需要的 loader，<code>node-sass</code>跟<code>sass-loader</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev node-sass sass-loader</span><br></pre></td></tr></table></figure><h3 id="Create-vue-config-js"><a href="#Create-vue-config-js" class="headerlink" title="Create vue.config.js"></a>Create vue.config.js</h3><p>如果已經有調整過 vue 專案的編譯過程，可能已經新增過這個檔案了，如果還沒有這個檔案就在專案目錄下新增，用以調整 webpack 的設定，這邊載入兩個共用的 scss 檔案，一個是我用來放 css 顏色的變數，而另一個是放一些常用的 mixin</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      sass: &#123;</span><br><span class="line">        data: `</span><br><span class="line">          @import &quot;@/assets/styles/_variables.scss&quot;;</span><br><span class="line">          @import &quot;@/assets/styles/_mixin.scss&quot;;</span><br><span class="line">        `</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外如果 sass-loader 會根據不同版本，有不同的寫法，上述的是 v7 或更舊的版本，</p><ul><li>sass-loader v8 : <code>data</code>請更換為<code>prependData</code></li><li>sass-loader v9 : <code>data</code>請更換為<code>additionalData</code></li></ul><p>做完這兩部，基本上就算完成了。接下來在專案內的 vue 檔撰寫 style 時，都可以套用已經 import 的變數跟 mixin 了。</p><h2 id="Customize-Element-UI-Style"><a href="#Customize-Element-UI-Style" class="headerlink" title="Customize Element-UI Style"></a>Customize Element-UI Style</h2><p>這次在使用 Element UI 的時候，有一些要客製化的需求，但是在 vue 檔的 style 直接寫，似乎無法將 css 套用到 Element UI 上，所以只好上網問問 Google 大神了。</p><p>參考文件 :</p><ol><li><a href="https://medium.com/i-am-mike/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E8%A3%A1%E9%9D%A2%E4%BD%BF%E7%94%A8element-ui%E4%B8%A6%E4%BF%AE%E6%94%B9css%E6%A8%A3%E5%BC%8F%E5%91%A2-f11c1e05787f">如何在Vue裡面使用Element-ui並修改CSS樣式呢？</a></li><li><a href="https://segmentfault.com/q/1010000009483822">Element-UI 不能自定义样式吗</a></li><li><a href="https://medium.com/@debbyji/deep-%E6%98%AF%E4%BB%80%E9%BA%BC-%E8%81%8A%E8%81%8A-vue-%E8%A3%A1%E7%9A%84-scoped-css-d1877f902845">/deep/ 是什麼？ — 聊聊 Vue 裡的 scoped css</a></li></ol><h3 id="Method-1-Remove-‘scoped’"><a href="#Method-1-Remove-‘scoped’" class="headerlink" title="Method 1 - Remove ‘scoped’"></a>Method 1 - Remove ‘scoped’</h3><p>將 vue 檔內 style 的 scoped 參數移除，這樣一來就可以全局套用了，只是缺點就是影響的範圍太廣，實在不是一個很好的方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.el-main &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">　　　　　</span><br><span class="line">// 改寫成下面</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.el-main &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="Method-2-Customize-at-local"><a href="#Method-2-Customize-at-local" class="headerlink" title="Method 2 - Customize at local"></a>Method 2 - Customize at local</h3><p>將 node_modules 裡面 Element UI 的 scss 整包抓下來自己修改，然後另外放到 assets 目錄下自行修改，並在 main.js 內引入，但是這個真的沒路可走的時候再這麼做吧！不然自己維護一整份也挺累的，而且如果有更新的需求時就慘了</p><ul><li>樣式路徑 <code>node_modules/element-ui/lib/theme-chalk</code></li><li>複製到專案下 <code>assets/element-ui/style</code></li><li>將原本 main.js 的 import 改成</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="line">// 將上面這行改成底下這行</span><br><span class="line">import &#x27;assets/element-ui/style/index.css&#x27;</span><br></pre></td></tr></table></figure><h3 id="Method-3-Use-Deep-Selector"><a href="#Method-3-Use-Deep-Selector" class="headerlink" title="Method 3 - Use Deep Selector"></a>Method 3 - Use Deep Selector</h3><p>這應該是目前最佳的解法，既不用取消 scoped 避免 style 影響到全局，也不用辛苦的維護一整份 css 檔案，而是透過 deep selector 來複寫到元件內的樣式，不過在網路上看到了幾種寫法，自己測試了很多次後，似乎只有一種寫法能正常運作。</p><ul><li>Use <code>&gt;&gt;&gt;</code>，不過這個在 Sass/SCSS 似乎無法被正確解析，應該比較適合單純 CSS 的用法</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.a &gt;&gt;&gt; .b &#123; /* ... */ &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>Use <code>/deep/</code> or <code>::v-deep</code><br>在一些 pre-processors 的語法下，可以改用上述的兩個語法，不過自己實作時似乎 <code>/deep/</code> 無法正常被解析編譯，只有 <code>::v-deep</code> 試驗成功。</li></ul><p>使用 <code>/deep/</code> 時，編譯會出錯，類似下面的錯誤訊息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Module build failed (from ./node_modules/sass-loader/dist/cjs.js):</span><br><span class="line">SassError: expected selector.</span><br><span class="line">    ╷</span><br><span class="line">278 │       /deep/ .el-input input&#123;</span><br><span class="line">    │       ^</span><br><span class="line">    ╵</span><br><span class="line">  /&lt;MY-VUE-PROJECT&gt;/pages/UserList.vue 278:7  root stylesheet</span><br></pre></td></tr></table></figure><p>底下是一個要修改 el-input 元件邊框顏色的範例，當使用者輸入驗證有錯時，想把 input 的邊框改成紅色</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.add-user-dialog &#123;</span><br><span class="line">  .input-field &#123;</span><br><span class="line">    &amp;.invalid &#123;</span><br><span class="line">      ::v-deep .el-input input &#123;</span><br><span class="line">        border-color: $redColor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上大概是這次做 Vue 小專案搭配不同的 UI Component Library 的一些心得跟筆記。只是這篇文章無法一氣呵成的寫完，分了三、四天來寫，寫文章記錄真的是件苦差事，不過還是希望自己能繼續保持這個好習慣。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近因為參加了公司舉辦的 hackathon，總算又有機會回來寫寫 Vue.js 了，太久沒寫真的生疏好多，加上最近 Angular 寫太多，再次回來寫 Vue 看到 .vue 檔裡面放著 template, script, style 覺得程式碼變得好長，不過好處是不用在 VSCode 裡面開一堆 .html, .ts, .scss 等檔案，透過 tab 找起檔案來會快一點點。&lt;/p&gt;
&lt;p&gt;由於參加了兩組比賽，所以可以嘗試不同的東西，這次就找了兩套 UI Component 來搭配使用，一個是使用 &lt;a href=&quot;https://vuesax.com/&quot;&gt;Vuesax&lt;/a&gt;，另一個則是使用 &lt;a href=&quot;https://element.eleme.io/&quot;&gt;Element&lt;/a&gt;，先說結論吧！ Element 用起來比較舒服，除了文件有中文可以看，元件也比較多種可選擇。一開始選擇 Vuesax 時，覺得這套畫面感覺很生動，就選來試試看！但是遇到安裝了 3.x 版，卻找去 4.0 版的說明文件，結果一直覺得怪怪的，好一陣子後才發現。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="vuejs" scheme="https://soarlin.github.io/tags/vuejs/"/>
    
    <category term="element" scheme="https://soarlin.github.io/tags/element/"/>
    
    <category term="vuesax" scheme="https://soarlin.github.io/tags/vuesax/"/>
    
    <category term="scss" scheme="https://soarlin.github.io/tags/scss/"/>
    
  </entry>
  
  <entry>
    <title>使用 Webpack 製作前端樣板 (以 Pug 與 Sass 開發)</title>
    <link href="https://soarlin.github.io/2020/07/18/pug-sass-boilerplate/"/>
    <id>https://soarlin.github.io/2020/07/18/pug-sass-boilerplate/</id>
    <published>2020-07-18T08:21:27.000Z</published>
    <updated>2022-07-28T04:58:07.426Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%E5%89%8D%E7%AB%AF%E6%A8%A3%E6%9D%BF%E4%BD%BF%E7%94%A8-webpack-%E7%94%A2%E7%94%9F">前端樣板使用 Webpack 產生</a><ul><li><a href="#%E5%B0%88%E6%A1%88%E4%BD%8D%E7%BD%AE">專案位置</a></li><li><a href="#%E7%94%A8%E5%88%B0%E7%9A%84%E6%8A%80%E8%A1%93">用到的技術</a></li><li><a href="#%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83">開發環境</a></li><li><a href="#%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%9D">工具安裝</a></li><li><a href="#%E7%9B%AE%E9%8C%84%E6%9E%B6%E6%A7%8B">目錄架構</a></li><li><a href="#webpack-%E8%A8%AD%E5%AE%9A">Webpack 設定</a><ul><li><a href="#webpack-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%AA%94">webpack 基本設定檔</a></li><li><a href="#%E9%80%B2%E5%85%A5%E9%BB%9E%E5%92%8C%E4%B8%8A%E4%B8%8B%E6%96%87">進入點和上下文</a></li><li><a href="#%E8%BC%B8%E5%87%BA%E6%AA%94%E6%A1%88">輸出檔案</a></li><li><a href="#devserver">DevServer</a></li><li><a href="#pug-%E8%BD%89-html">Pug 轉 HTML</a></li><li><a href="#sass-rule">Sass rule</a></li><li><a href="#css-rule">CSS rule</a></li><li><a href="#js-rule">JS rule</a></li><li><a href="#images-%E7%9B%B8%E9%97%9C%E8%99%95%E7%90%86">images 相關處理</a></li><li><a href="#%E9%9D%9C%E6%85%8B%E6%AA%94%E6%A1%88%E8%99%95%E7%90%86%E8%88%87%E5%85%B6%E4%BB%96%E8%A8%AD%E5%AE%9A">靜態檔案處理與其他設定</a></li></ul></li></ul></li><li><a href="#%E5%8F%83%E8%80%83%E6%96%87%E7%AB%A0">參考文章</a></li></ul><!-- /TOC --><p><a id="markdown-前端樣板使用-webpack-產生" name="前端樣板使用-webpack-產生"></a></p><h1 id="前端樣板使用-Webpack-產生"><a href="#前端樣板使用-Webpack-產生" class="headerlink" title="前端樣板使用 Webpack 產生"></a>前端樣板使用 Webpack 產生</h1><p>由於之前做過的前端樣板實在是太過時了，除了 node 版本幾跟目前已經差太多了外(當時 v4.x，現在 v12.x)，前端流程的處理工具 gulp 現在也越來越少人知道了，時代的眼淚啊！前端真的是日新月異，每過一陣子，學過的東西就漸漸被淘汰，當時還用了一個現在幾乎沒人知道的 bower 前端套件管理工具，現在大家應該都只知道 npm 這東西吧！</p><p>大概從去年就開始有在想要再弄一個新的前端樣板，以便日後有切版需求的時候可以使用。無奈自己懶惰加上也沒有任何切版的案子，所以就一直停滯沒動作，最近看到女友去接了一個友情外包案，就是要使用 pug + sass 來做切版。</p><span id="more"></span><p>不過在我完成這個小工具之前，其實網路上應該也很多類似的專案了，甚至還有很多好用的前端開發工具，如： <a href="https://codekitapp.com/">CodeKit</a>、<a href="https://prepros.io/">Prepros</a>、<a href="http://fireapp.kkbox.com/">Fire.app</a>…等工具可以達到這些要求。</p><p>不過這次就當作是練功，順便熟悉一下 Webpack 的一些設定，雖然大部分也是到處複製貼上後，拼湊出來的產物，不過…我也是花了不少時間先理解再<del>抄襲</del>效仿，底下紀錄一下這次的內容。</p><p><a id="markdown-專案位置" name="專案位置"></a></p><h2 id="專案位置"><a href="#專案位置" class="headerlink" title="專案位置"></a>專案位置</h2><p><a href="https://github.com/SoarLin/pug-sass-template">https://github.com/SoarLin/pug-sass-template</a></p><p><a id="markdown-用到的技術" name="用到的技術"></a></p><h2 id="用到的技術"><a href="#用到的技術" class="headerlink" title="用到的技術"></a>用到的技術</h2><ul><li>Webpack : 一個強大的前端打包工具，雖然版本在從 2 -&gt; 4 的過程中，許多設定過程不一定能相容，甚至要重學，但是我想應該也趨近於穩定了吧！</li><li>Sass : CSS preprocessor，雖然是叫 Sass，不過實際上我是用 SCSS 的語法來寫啦！如果看不順眼的其實可以自行把 scss 改成 sass</li><li>Pug : HTML 的樣板語言，前身是 Jade，寫起來很精簡，但是…我跟它還很不熟，只是現在要我繼續寫 EJS 可能也忘得差不多了</li></ul><p><a id="markdown-開發環境" name="開發環境"></a></p><h2 id="開發環境"><a href="#開發環境" class="headerlink" title="開發環境"></a>開發環境</h2><p>紀錄這次專案開發時的環境，避免之後每個套件版本差異太多，忘了該回到哪個版本來執行。</p><ul><li>node v12.18.2</li><li>npm 6.14.5</li><li>webpack 4.43</li></ul><p><a id="markdown-工具安裝" name="工具安裝"></a></p><h2 id="工具安裝"><a href="#工具安裝" class="headerlink" title="工具安裝"></a>工具安裝</h2><p>基本上一定要先安裝 node.js 與 npm，這部分就麻煩大家自己先在電腦上安裝吧！<a href="https://nodejs.org/en/">Node.js 官網</a> 然後版本盡可能不要與上述的相差太多，不然很有可能無法運作…XD</p><ol><li><code>npm i -D webpack webpack-cli</code> 先安裝 <code>webpack</code> 與 <code>webpack-cli</code></li><li><code>npm install</code> 安裝專案所需要的套件</li></ol><p><a id="markdown-目錄架構" name="目錄架構"></a></p><h2 id="目錄架構"><a href="#目錄架構" class="headerlink" title="目錄架構"></a>目錄架構</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目錄結構</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│ ├── assets</span><br><span class="line">│ ├── css</span><br><span class="line">│ ├── images</span><br><span class="line">│ ├── js</span><br><span class="line">│ ├── pug</span><br><span class="line">│ └── sass</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><p>專案目錄下的 README.md 與 package.json 都不是本次討論的重點，主要開發的檔案都放在 <code>src</code> 目錄下，而 webpack 的打包設定都寫在 <code>webpack.config.js</code> 裡面</p><p>大概介紹一下 src 目錄下的結構</p><ul><li><strong>assets</strong> : 用來放置一些靜態文件，可用來放字形檔(fonts), SVG 檔案或其他非圖片的檔案</li><li><strong>images</strong> : 切版時偶爾會需要一些圖片檔案，就可以用來放這邊，如：jpg, png, gif 等</li><li><strong>css</strong> : 一些額外的 css 檔案，這次專案使用到 Bootstrap 的範例，懶得自己重頭寫 css, 就把下載下來的範例 css 放這邊，並且在頁面內載入</li><li><strong>js</strong> : 主要的程式進入點 <code>index.js</code> 放在這裡，另外如果需要自行客製化 js 檔，也可以放這邊，但是記得在 index.js 內 import</li><li><strong>sass</strong> : 用來放切版用的 sass 檔，你可以自行管理裡面的目錄結構</li><li><strong>pug</strong> : HTML 樣板檔案，可以自行設置不同的 layout 來繼承，也能製作共用的區塊來 include 等等，熟悉 pug 開發的人員應該比我還懂的怎麼使用</li></ul><p><a id="markdown-webpack-設定" name="webpack-設定"></a></p><h2 id="Webpack-設定"><a href="#Webpack-設定" class="headerlink" title="Webpack 設定"></a>Webpack 設定</h2><p>這裡我就只針對這次專案調整的部分說明，如果想知道更多細節，還是要去翻 webpack 上的說明。</p><p><a id="markdown-webpack-基本設定檔" name="webpack-基本設定檔"></a></p><h3 id="webpack-基本設定檔"><a href="#webpack-基本設定檔" class="headerlink" title="webpack 基本設定檔"></a>webpack 基本設定檔</h3><p>webpack 在安裝後，需要自己產生一個設定檔，通常會是在專案目錄下新建一個 <code>webpack.config.js</code> 的檔案，而基本的內容會寫上如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#x27;&#x27;,</span><br><span class="line">  output: &#x27;&#x27;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: []</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: []</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a id="markdown-進入點和上下文" name="進入點和上下文"></a></p><h3 id="進入點和上下文"><a href="#進入點和上下文" class="headerlink" title="進入點和上下文"></a>進入點和上下文</h3><p>這裡介紹一下 entry 與 context，entry 顧名思義就是 webpack 要處理的 js 進入點，通常會在這裡開始把需要的套件再逐一 import 進來，而 context 是用來指定入口所處目錄的絕對路徑，之後可以給 entry 與 loader 套用。</p><p>舉例來說：原本的 entry 路徑為 <code>&lt;專案目錄&gt;/src/js/indes.js</code>，但是因為我幾乎把所有開發用到的檔案都放到 src 目錄下，所以我可以使用 context 來指定以後再寫道 entry 或是 loader 的檔案路徑時，都從一個共同的絕對路徑再開始找，也就是 <code>&lt;專案目錄&gt;/src</code></p><p>所以再加入這兩項後，webpack 設定會變成如下：這裏使用到 <code>path.resolve</code> 來指定到專案目錄下 src 的目錄</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">　　　</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, &#x27;src&#x27;),</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: &#x27;./js/index.js&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  // ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-輸出檔案" name="輸出檔案"></a></p><h3 id="輸出檔案"><a href="#輸出檔案" class="headerlink" title="輸出檔案"></a>輸出檔案</h3><p>指定這次的 bundle 後，輸出的檔案該如何配置。這邊透過 <code>path</code> 指定檔案輸出的絕對路徑，而 filename 用來指定輸出的檔名結構。經過調整後變成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">　　　</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    filename: &#x27;./js/[name].js?[hash:8]&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  // ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-devserver" name="devserver"></a></p><h3 id="DevServer"><a href="#DevServer" class="headerlink" title="DevServer"></a>DevServer</h3><p>開發的過程中，還是需要一個可以即時預覽的 server 來顯示目前狀況，所以這裡使用 <code>webpack-dev-server</code> 這套件，所以需要手動安裝 <code>npm install --save-dev webpack-dev-server</code> 接著再到 webpack 設定內增加 devServer 的設定</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">　　　</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ....</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    compress: true,</span><br><span class="line">    port: 3000</span><br><span class="line">  &#125;,</span><br><span class="line">  // ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="markdown-pug-轉-html" name="pug-轉-html"></a></p><h3 id="Pug-轉-HTML"><a href="#Pug-轉-HTML" class="headerlink" title="Pug 轉 HTML"></a>Pug 轉 HTML</h3><p>這次的重點之一，不過我這邊的解法也是去網路上找來的。主要是參考底下參考文章的第二篇，需要安裝三個套件 <code>html-loader</code>、<code>pug-html-loader</code>和<code>html-webpack-plugin</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-loader pug-html-loader html-webpack-plugin</span><br></pre></td></tr></table></figure><p>接著再 webpack.config.js 裡面設定調整如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">// 引入 html-webpack-plugin 套件</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;html-loader&#x27;,</span><br><span class="line">            options: &#123; minimize: false &#125;</span><br><span class="line">            // 不壓縮 HTML</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;pug-html-loader&#x27;,</span><br><span class="line">            options: &#123; pretty: true &#125;</span><br><span class="line">            // 美化 HTML 的編排 (不壓縮HTML的一種)</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./pug/index.pug&#x27;,</span><br><span class="line">      filename: &#x27;index.html&#x27;,</span><br><span class="line">      inject: true,</span><br><span class="line">      chunks: [&#x27;index&#x27;],  // 根據 entry 的名字而定</span><br><span class="line">      minify: &#123;</span><br><span class="line">        sortAttributes: true,</span><br><span class="line">        collapseWhitespace: false, // 折疊空白字元就是壓縮Html</span><br><span class="line">        collapseBooleanAttributes: true, // 折疊布林值属性，例:readonly checked</span><br><span class="line">        removeComments: true, // 移除註釋</span><br><span class="line">        removeAttributeQuotes: true // 移除屬性的引號</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是只有一個 index.pug 檔需要轉換時，但實際上在切版時，肯定不會這麼簡單。當遇到多個 pug 檔需要轉換，這裡建議將要轉換為 html 的 pug 集中放到 <code>/src/pug/</code> 下的第一層目錄，並且透過 glob 這工具抓取目錄下第一層的 pug 檔案後再用 forEach 的方式去撰寫 plugins 裡面的內容。所以可以改成下方這樣。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const glob = require(&#x27;glob&#x27;);</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">// 將原本 module.exports 後的內容改寫道 config 變數內</span><br><span class="line">var config = &#123;</span><br><span class="line">  context: path.resolve(__dirname, &#x27;src&#x27;),</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: &#x27;./js/index.js&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123; //... &#125;,</span><br><span class="line">  devServer: &#123; // ... &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        use: [ // ... ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    // 將原本的 new HtmlWebpackPlugin 刪除</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 透過 glob 找出所有 pug 檔後用 for 迴圈寫入 plugins 裡面</span><br><span class="line">glob.sync(&#x27;./src/pug/*.pug&#x27;).forEach((path) =&gt; &#123;</span><br><span class="line">  const start = path.indexOf(&#x27;/pug/&#x27;) + 5;</span><br><span class="line">  const end = path.length - 4;</span><br><span class="line">  const name = path.slice(start, end);</span><br><span class="line">  config.plugins.push(</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./pug/&#x27; + name + &#x27;.pug&#x27;,</span><br><span class="line">      filename: name + &#x27;.html&#x27;,</span><br><span class="line">      inject: true,</span><br><span class="line">      chunks: [&#x27;index&#x27;],</span><br><span class="line">      minify: &#123;</span><br><span class="line">        sortAttributes: true,</span><br><span class="line">        collapseWhitespace: false,</span><br><span class="line">        collapseBooleanAttributes: true,</span><br><span class="line">        removeComments: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure><p><a id="markdown-sass-rule" name="sass-rule"></a></p><h3 id="Sass-rule"><a href="#Sass-rule" class="headerlink" title="Sass rule"></a>Sass rule</h3><p>為了讓 sass 能順利轉換成 css 並且可以在畫面上顯示，需要安裝至少三個 loader 插件與 <code>node-sass</code>、<code>sass-loader</code>、<code>css-loader</code>與<code>style-loader</code>，然後再設定檔內的 module 增加一個 rule</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev node-sass sass-loader css-loader style-loader</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">// ...</span><br><span class="line">var config = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        use: // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/i,</span><br><span class="line">        use: [</span><br><span class="line">          &#x27;style-loader&#x27;, // Creates `style` nodes from JS strings</span><br><span class="line">          &#x27;css-loader&#x27;, // Translates CSS into CommonJS</span><br><span class="line">          &#x27;sass-loader&#x27; // Compiles Sass to CSS</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// ...</span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure><p><a id="markdown-css-rule" name="css-rule"></a></p><h3 id="CSS-rule"><a href="#CSS-rule" class="headerlink" title="CSS rule"></a>CSS rule</h3><p>因為這次專案用了 Bootstrap 4 的範例，所以直接把範例提供的 css 檔拿來用，所以會有外部 css 需要被載入與顯示，所以需要在 module 內的 rule 增加這個 loader</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">// ...</span><br><span class="line">var config = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/i,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/i,</span><br><span class="line">        use: [</span><br><span class="line">          &#x27;style-loader&#x27;, // Creates `style` nodes from JS strings</span><br><span class="line">          &#x27;css-loader&#x27; // Translates CSS into CommonJS</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p><a id="markdown-js-rule" name="js-rule"></a></p><h3 id="JS-rule"><a href="#JS-rule" class="headerlink" title="JS rule"></a>JS rule</h3><p>開發時如果在撰寫 js，相信大部分的人應該都會開始寫 ES6 甚至是 ES7 的一些語法了，所以需要多個 babel 來將這些語法轉回 ES5 讓瀏覽器能順利解析，所以會多上這個 rule，不過需要先安裝 <code>@babel/core</code>、<code>babel-loader</code>與<code>@babel/preset-env</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/preset-env babel-loader</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ...</span><br><span class="line">var config = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/i,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/i,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: &#x27;babel-loader&#x27;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [&#x27;@babel/preset-env&#x27;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p><a id="markdown-images-相關處理" name="images-相關處理"></a></p><h3 id="images-相關處理"><a href="#images-相關處理" class="headerlink" title="images 相關處理"></a>images 相關處理</h3><p>圖片的處理，也是參考別人的教學，依樣畫葫蘆的使用，不過因為是做樣板，所以實際上沒用到圖片，不過還是可以列出來讓有需要的人參考。需要安裝<code>url-loader</code>與<code>image-webpack-loader</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev url-loader image-webpack-loader</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ...</span><br><span class="line">var config = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.pug$/,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/i,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/i,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(jpe?g|png|gif)$/,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;url-loader&#x27;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: 8192,</span><br><span class="line">              name: &#x27;[path][name].[ext]?[hash:8]&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;image-webpack-loader&#x27;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              mozjpeg: &#123;</span><br><span class="line">                progressive: true,</span><br><span class="line">                quality: 65</span><br><span class="line">              &#125;,</span><br><span class="line">              optipng: &#123;</span><br><span class="line">                enabled: false</span><br><span class="line">              &#125;,</span><br><span class="line">              pngquant: &#123;</span><br><span class="line">                quality: &#x27;65-90&#x27;,</span><br><span class="line">                speed: 4</span><br><span class="line">              &#125;,</span><br><span class="line">              gifsicle: &#123;</span><br><span class="line">                interlaced: false</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p><a id="markdown-靜態檔案處理與其他設定" name="靜態檔案處理與其他設定"></a></p><h3 id="靜態檔案處理與其他設定"><a href="#靜態檔案處理與其他設定" class="headerlink" title="靜態檔案處理與其他設定"></a>靜態檔案處理與其他設定</h3><p>寫到這邊已經寫了好幾個小時，所以有點累了，最後一口氣寫完好了，剩下的幾個設定有</p><ul><li>靜態檔案搬移，使用 <code>copy-webpack-plugin</code> 插件</li><li>每次 build 前的目錄清空，使用 <code>clean-webpack-plugin</code></li><li>加載 jQuery : 因為用到了 Bootstrap 4，所以還是需要 jQuery，這裡使用 webpack 本身的 <code>ProvidePlugin</code></li></ul><p>需要先安裝<code>copy-webpack-plugin</code>、<code>clean-webpack-plugin</code>、<code>jquery</code>與<code>bootstrap</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev copy-webpack-plugin clean-webpack-plugin</span><br><span class="line">npm install --save jquery bootstrap</span><br></pre></td></tr></table></figure><p>所以設定檔會變成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ...</span><br><span class="line">// 增加 webpack 方便之後取得 webpack.ProvidePlugin 插件</span><br><span class="line">const webpack = require(&#x27;webpack&#x27;);</span><br><span class="line">// 清除目錄插件</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line">// 資料搬移插件</span><br><span class="line">const CopyPlugin = require(&#x27;copy-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">var config = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  plugins: [</span><br><span class="line">    // 每次先清除前一次 build 的資料</span><br><span class="line">    new CleanWebpackPlugin(),</span><br><span class="line">    // 搬移靜態檔案</span><br><span class="line">    new CopyPlugin(&#123;</span><br><span class="line">      patterns: [</span><br><span class="line">        &#123; from: &#x27;css&#x27;, to: &#x27;css&#x27; &#125;,</span><br><span class="line">        &#123; from: &#x27;images&#x27;, to: &#x27;images&#x27; &#125;,</span><br><span class="line">        &#123; from: &#x27;assets&#x27;, to: &#x27;assets&#x27; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;),</span><br><span class="line">    // 載入 jQuery</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: &#x27;jquery&#x27;,</span><br><span class="line">      jQuery: &#x27;jquery&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p>大致的設定內容都介紹一輪，完整的 webpack.config.js 可以去我的專案內查看，相差沒太多，但是怕日後忘記每個設定的內容再做什麼，所以趁著記憶猶新的時候，先記錄下來。</p><p><a id="markdown-參考文章" name="參考文章"></a></p><h1 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h1><ol><li><a href="https://magiclen.org/webpack/">如何用 Webpack 來打包 JavaScript、SCSS/CSS、HTML 網頁和任意檔案？</a></li><li><a href="https://medium.com/%E5%B0%8F%E5%BD%A5%E5%BD%A5%E7%9A%84%E5%89%8D%E7%AB%AF%E4%BA%94%E5%9B%9B%E4%B8%89/%E5%9C%A8webpack%E4%B8%AD%E4%BD%BF%E7%94%A8pug%E7%94%A2%E7%94%9Fhtml-24eb9fec22c7">在webpack中使用Pug產生Html</a></li><li><a href="https://www.vialley.com/555/%E5%A6%82%E4%BD%95%E8%A8%AD%E5%AE%9A-webpack-%E7%AD%86%E8%A8%98">如何設定 webpack 筆記</a></li><li><a href="https://guahsu.io/2017/12/vue-cli-webpack-pug-scss-bootstrap4/">Vue-cli 透過 webpack 來加載使用 pug/scss 及 BootStrap4</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%89%8D%E7%AB%AF%E6%A8%A3%E6%9D%BF%E4%BD%BF%E7%94%A8-webpack-%E7%94%A2%E7%94%9F&quot;&gt;前端樣板使用 Webpack 產生&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B0%88%E6%A1%88%E4%BD%8D%E7%BD%AE&quot;&gt;專案位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%94%A8%E5%88%B0%E7%9A%84%E6%8A%80%E8%A1%93&quot;&gt;用到的技術&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83&quot;&gt;開發環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%9D&quot;&gt;工具安裝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%9B%AE%E9%8C%84%E6%9E%B6%E6%A7%8B&quot;&gt;目錄架構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#webpack-%E8%A8%AD%E5%AE%9A&quot;&gt;Webpack 設定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#webpack-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%AA%94&quot;&gt;webpack 基本設定檔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%80%B2%E5%85%A5%E9%BB%9E%E5%92%8C%E4%B8%8A%E4%B8%8B%E6%96%87&quot;&gt;進入點和上下文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%BC%B8%E5%87%BA%E6%AA%94%E6%A1%88&quot;&gt;輸出檔案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#devserver&quot;&gt;DevServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pug-%E8%BD%89-html&quot;&gt;Pug 轉 HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sass-rule&quot;&gt;Sass rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#css-rule&quot;&gt;CSS rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#js-rule&quot;&gt;JS rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#images-%E7%9B%B8%E9%97%9C%E8%99%95%E7%90%86&quot;&gt;images 相關處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%9D%9C%E6%85%8B%E6%AA%94%E6%A1%88%E8%99%95%E7%90%86%E8%88%87%E5%85%B6%E4%BB%96%E8%A8%AD%E5%AE%9A&quot;&gt;靜態檔案處理與其他設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8F%83%E8%80%83%E6%96%87%E7%AB%A0&quot;&gt;參考文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;

&lt;p&gt;&lt;a id=&quot;markdown-前端樣板使用-webpack-產生&quot; name=&quot;前端樣板使用-webpack-產生&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前端樣板使用-Webpack-產生&quot;&gt;&lt;a href=&quot;#前端樣板使用-Webpack-產生&quot; class=&quot;headerlink&quot; title=&quot;前端樣板使用 Webpack 產生&quot;&gt;&lt;/a&gt;前端樣板使用 Webpack 產生&lt;/h1&gt;&lt;p&gt;由於之前做過的前端樣板實在是太過時了，除了 node 版本幾跟目前已經差太多了外(當時 v4.x，現在 v12.x)，前端流程的處理工具 gulp 現在也越來越少人知道了，時代的眼淚啊！前端真的是日新月異，每過一陣子，學過的東西就漸漸被淘汰，當時還用了一個現在幾乎沒人知道的 bower 前端套件管理工具，現在大家應該都只知道 npm 這東西吧！&lt;/p&gt;
&lt;p&gt;大概從去年就開始有在想要再弄一個新的前端樣板，以便日後有切版需求的時候可以使用。無奈自己懶惰加上也沒有任何切版的案子，所以就一直停滯沒動作，最近看到女友去接了一個友情外包案，就是要使用 pug + sass 來做切版。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="sass" scheme="https://soarlin.github.io/tags/sass/"/>
    
    <category term="webpack" scheme="https://soarlin.github.io/tags/webpack/"/>
    
    <category term="pug" scheme="https://soarlin.github.io/tags/pug/"/>
    
  </entry>
  
  <entry>
    <title>使用 ESLint 自動修正 Vue 專案語法</title>
    <link href="https://soarlin.github.io/2020/07/05/eslint-auto-fix/"/>
    <id>https://soarlin.github.io/2020/07/05/eslint-auto-fix/</id>
    <published>2020-07-05T06:40:37.000Z</published>
    <updated>2022-07-28T04:58:07.425Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在當工具人的時候，幫忙處理一個 vue 的前端專案，但是發現雖然對方有使用 eslint，但是似乎沒人遵守語法檢查的建議，都非常的隨性，實在是很沒一制性的專案。</p><p>後來想到之前在開發 Nuxt.js 專案時，似乎會自動產生 eslint 修正的語法在 package.json 裡面，所以可以透過 npm 執行某個包含 eslint 自動修正的 script 來將一些語法檢查的錯誤做修正，不過我猜應該能修正的部分會有限制，有些可能還是需要人工介入判斷吧！但是至少可以先一些基本的語法修正。</p><span id="more"></span><p>後來研究了一下 eslint 本身有提供 <code>--fix</code> 的參數可使用，不過不過這似乎主要針對 .js 檔的修正，如果是在開發 vue 專案時的 .vue 專案，就需要額外安裝套件了，基本可額外安裝 <code>eslint-plugin-vuefix</code> 這個套件，並且在 .eslintrc.js 檔裡面的 plugins 加上 <code>vuefix</code></p><p>操作步驟 :</p><ul><li>原本的 package.json 內，新增一個有自動修正的 script <code>lint-fix</code></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint --ext .js,.vue src test/unit test/e2e/specs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint-fix&quot;</span>: <span class="string">&quot;eslint --fix --ext .js,.vue src test/unit test/e2e/specs&quot;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>安裝自動修正套件 <code>eslint-plugin-vuefix</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save eslint-plugin-vuefix</span><br></pre></td></tr></table></figure><ul><li>在 .eslintrc.js 檔內新增使用插件名稱，如果 vue 專案本身有安裝 <code>eslint-plugin-html</code> 並且載入 .eslintrc.js，這會影響自動修正的插件執行，所以可以將該插件註解或是試著放到 <code>vuefix</code> 插件後面看看</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="string">&#x27;vuefix&#x27;</span>,</span><br><span class="line">    <span class="comment">// &#x27;html&#x27;    // comment this plugin</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接著執行新增的 script 來修正， <code>npm run lint-fix</code> 執行後，就大功告成了，不放心的可以在使用原本的 <code>npm run lint</code> 檢查是否還有語法需要修正</li></ul><p>我拿了目前電腦裡面，以前開發的專案來測試，一開始先執行 <code>npm run lint</code>，可以看到一堆語法有問題的提示，大多是字串用了雙引號(Strings must use singlequote)或是多了最後的逗號(Extra semicolon)的問題，以及一些其他問題<br><img src="/images/eslint/eslint-01.png" alt="eslint-check"></p><p>接著透過修正的語法 <code>npm run lint-fix</code> 進行修正後，在使用 <code>npm run lint</code> 檢查，果然語法的問題都修正了！<br><img src="/images/eslint/eslint-02.png" alt="eslint-autofix"></p><p>最後，開發 vue 專案的話，推薦可以使用 <code>eslint-plugin-vue</code>，對於 vue 專案的 Code Style 規範可以根據不同嚴謹程度來規範，當然也包含自動修正的功能，想知道更多細節，可以參考這篇介紹 : <a href="https://pjchender.blogspot.com/2019/07/vue-vue-style-guide-eslint-plugin-vue.html">[Vue] 整合 Vue style guide, eslint-plugin-vue 和 VSCode</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天在當工具人的時候，幫忙處理一個 vue 的前端專案，但是發現雖然對方有使用 eslint，但是似乎沒人遵守語法檢查的建議，都非常的隨性，實在是很沒一制性的專案。&lt;/p&gt;
&lt;p&gt;後來想到之前在開發 Nuxt.js 專案時，似乎會自動產生 eslint 修正的語法在 package.json 裡面，所以可以透過 npm 執行某個包含 eslint 自動修正的 script 來將一些語法檢查的錯誤做修正，不過我猜應該能修正的部分會有限制，有些可能還是需要人工介入判斷吧！但是至少可以先一些基本的語法修正。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="eslint" scheme="https://soarlin.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 遇到 dyld: Library not loaded問題處理</title>
    <link href="https://soarlin.github.io/2019/08/13/mac-library-not-loaded-%E5%95%8F%E9%A1%8C%E8%99%95%E7%90%86/"/>
    <id>https://soarlin.github.io/2019/08/13/mac-library-not-loaded-%E5%95%8F%E9%A1%8C%E8%99%95%E7%90%86/</id>
    <published>2019-08-13T01:14:23.000Z</published>
    <updated>2022-07-28T04:58:07.426Z</updated>
    
    <content type="html"><![CDATA[<!-- MarkdownTOC --><ul><li><a href="#%E4%BD%BF%E7%94%A8-otool-%E5%B7%A5%E5%85%B7%E6%AA%A2%E6%9F%A5%E7%9B%B8%E4%BE%9D%E6%80%A7">使用 otool 工具檢查相依性</a></li><li><a href="#%E4%BD%BF%E7%94%A8-installnametool-%E4%BF%AE%E6%AD%A3-dylib-%E8%B7%AF%E5%BE%91">使用 install_name_tool 修正 dylib 路徑</a></li></ul><!-- /MarkdownTOC --><p>最近在處理 PHP 翻譯檔的問題，好不容易將所有翻譯的資料放到 Onesky 上後，發現下載下來的 .po 檔，要轉成 .mo 檔時，遇到了奇怪的動態庫載入問題。後來迫不得已努力的去找相關資料來解決，好不容易找到一篇教學是我可以看得懂的了。</p><p>我遇到的情況是在使用 <code>msgfmt</code> 指令將 gettext 使用到的翻譯檔 PO 轉成 MO 時，碰到下面的情況</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&gt; msgfmt zoek.po -o zoek.mo</span><br><span class="line">dyld: Library not loaded: /usr/local/lib/libgettextsrc-0.19.8.dylib</span><br><span class="line">  Referenced from: /usr/local/bin/msgfmt</span><br><span class="line">  Reason: image not found</span><br><span class="line">[1]    89445 abort      /usr/local/bin/msgfmt zoek.po -o zoek.mo</span><br></pre></td></tr></table></figure><span id="more"></span><p>簡單的說就是 <code>msgfmt</code> 在運行時，有些相依的動態庫檔案找不到了，而第一個遇到的是 libgettextsrc 這個檔案，因為先前透過 homebrew 安裝 gettext 時，似乎已經更新到 0.20.1 的版本，而舊的 0.19.8 的動態庫檔案可能就因為這樣失效了，所以最簡單的作法就是把 <code>msgfmt</code> 相依的動態庫黨，路徑替換成 homebrew 安裝的新版本上。</p><p><a id="使用-otool-工具檢查相依性"></a></p><h2 id="使用-otool-工具檢查相依性"><a href="#使用-otool-工具檢查相依性" class="headerlink" title="使用 otool 工具檢查相依性"></a>使用 otool 工具檢查相依性</h2><p>針對一個要執行的應用程式，macOS 本身似乎提供了一個工具可以檢查所有相依的檔案位置，那就是 <code>otool</code> 關於這工具的使用方式太多了，這邊只說我會用到的部分！</p><p>檢查應用程式使用到的 libraries 檔案，指令 <code>otool -L &lt;ApplicationName&gt;</code><br>所以用來檢查 msgfmt 後可發現使用到了不少 dylib 檔案</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&gt; otool -L /usr/local/bin/msgfmt</span><br><span class="line">/usr/local/bin/msgfmt:</span><br><span class="line">    /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1454.90.0)</span><br><span class="line">    /usr/local/lib/libgettextsrc-0.19.8.dylib (compatibility version 0.0.0, current version 0.0.0)</span><br><span class="line">    /usr/local/lib/libgettextlib-0.19.8.dylib (compatibility version 0.0.0, current version 0.0.0)</span><br><span class="line">    /usr/lib/libxml2.2.dylib (compatibility version 10.0.0, current version 10.9.0)</span><br><span class="line">    /usr/lib/libncurses.5.4.dylib (compatibility version 5.4.0, current version 5.4.0)</span><br><span class="line">    /usr/local/opt/libunistring/lib/libunistring.2.dylib (compatibility version 4.0.0, current version 4.0.0)</span><br><span class="line">    /usr/local/lib/libintl.9.dylib (compatibility version 11.0.0, current version 11.4.0)</span><br><span class="line">    /usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)</span><br><span class="line">    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4)</span><br></pre></td></tr></table></figure><p>而一開始遇到的 libgettextsrc-0.19.8.dylib 這連結已經失效，所以需要手動替換成 homebrew 安裝 gettext 0.20.1 版本下的檔案，而透過 homebrew 安裝的程式，路徑大多位於 <code>/usr/local/Cellar/</code> 下面，所以在下面找一下 gettext 後可以再看到裡面有 lib 的資料夾，而資料夾下應該就是這次所需要的相關的 dylib 檔案了</p><p><a id="使用-installnametool-修正-dylib-路徑"></a></p><h2 id="使用-install-name-tool-修正-dylib-路徑"><a href="#使用-install-name-tool-修正-dylib-路徑" class="headerlink" title="使用 install_name_tool 修正 dylib 路徑"></a>使用 install_name_tool 修正 dylib 路徑</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install_name_tool &lt;OldPath&gt; &lt;NewPath&gt; &lt;ApplicationPath&gt;</span><br></pre></td></tr></table></figure><p>這時候我們可以使用 <code>install_name_tool</code> 這個指令來手動更換 dylib 檔案路徑，使用的方式大致上如上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/lib/libgettextsrc-0.19.8.dylib</span><br><span class="line">/usr/local/lib/libgettextlib-0.19.8.dylib</span><br><span class="line">/usr/local/lib/libintl.9.dylib</span><br></pre></td></tr></table></figure><p>而在修正 <code>msgfmt</code> 遇到的問題時，前後總共發現了上面三個 dylib 路徑遺失</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install_name_tool -change /usr/local/lib/libgettextsrc-0.19.8.dylib /usr/local/Cellar/gettext/0.20.1/lib/libgettextsrc-0.20.1.dylib /usr/local/bin/msgfmt</span><br><span class="line">install_name_tool -change /usr/local/lib/libgettextlib-0.19.8.dylib /usr/local/Cellar/gettext/0.20.1/lib/libgettextlib-0.20.1.dylib /usr/local/bin/msgfmt</span><br><span class="line">install_name_tool -change /usr/local/lib/libintl.9.dylib /usr/local/Cellar/gettext/0.20.1/lib/libintl.8.dylib /usr/local/bin/msgfmt</span><br></pre></td></tr></table></figure><p>所以使用 install_name_tool 修正的指令，大概就像上面這樣</p><p>在替換完這些 dylib 後，就可以正常的使用 <code>msgfmt</code> 來轉換 po 檔成 mo 檔了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msgfmt oooo.po -o xxxx.mo</span><br></pre></td></tr></table></figure><p>沒想到 blog 隔了快一年才更新這麼一篇文章，好慘！從每月一篇到每季一篇，現在直接升級到每年一篇….XD</p>]]></content>
    
    
    <summary type="html">&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8-otool-%E5%B7%A5%E5%85%B7%E6%AA%A2%E6%9F%A5%E7%9B%B8%E4%BE%9D%E6%80%A7&quot;&gt;使用 otool 工具檢查相依性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8-installnametool-%E4%BF%AE%E6%AD%A3-dylib-%E8%B7%AF%E5%BE%91&quot;&gt;使用 install_name_tool 修正 dylib 路徑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;


&lt;p&gt;最近在處理 PHP 翻譯檔的問題，好不容易將所有翻譯的資料放到 Onesky 上後，發現下載下來的 .po 檔，要轉成 .mo 檔時，遇到了奇怪的動態庫載入問題。後來迫不得已努力的去找相關資料來解決，好不容易找到一篇教學是我可以看得懂的了。&lt;/p&gt;
&lt;p&gt;我遇到的情況是在使用 &lt;code&gt;msgfmt&lt;/code&gt; 指令將 gettext 使用到的翻譯檔 PO 轉成 MO 時，碰到下面的情況&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;gt; msgfmt zoek.po -o zoek.mo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dyld: Library not loaded: /usr/local/lib/libgettextsrc-0.19.8.dylib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Referenced from: /usr/local/bin/msgfmt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Reason: image not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1]    89445 abort      /usr/local/bin/msgfmt zoek.po -o zoek.mo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="macOS" scheme="https://soarlin.github.io/categories/macOS/"/>
    
    
    <category term="gettext" scheme="https://soarlin.github.io/tags/gettext/"/>
    
    <category term="msgfmt" scheme="https://soarlin.github.io/tags/msgfmt/"/>
    
    <category term="otool" scheme="https://soarlin.github.io/tags/otool/"/>
    
    <category term="install_name_tool" scheme="https://soarlin.github.io/tags/install-name-tool/"/>
    
  </entry>
  
  <entry>
    <title>設定AWS Lambda開發環境且在VPC內能連到外部網路</title>
    <link href="https://soarlin.github.io/2018/09/01/%E5%A6%82%E4%BD%95%E8%AE%93AWS-Lambda%E5%9C%A8VPC%E5%85%A7%E8%83%BD%E9%80%A3%E5%88%B0%E5%A4%96%E9%83%A8%E7%B6%B2%E8%B7%AF/"/>
    <id>https://soarlin.github.io/2018/09/01/%E5%A6%82%E4%BD%95%E8%AE%93AWS-Lambda%E5%9C%A8VPC%E5%85%A7%E8%83%BD%E9%80%A3%E5%88%B0%E5%A4%96%E9%83%A8%E7%B6%B2%E8%B7%AF/</id>
    <published>2018-09-01T09:49:25.000Z</published>
    <updated>2022-07-28T04:58:07.427Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前需要 Lambda 在 VPC 下運作，才能連接到 VPC 下的 ElasticSearch，但是有需要有外連網路的功能</p></blockquote><p>最近開始在使用 AWS Lambda，為了能跟目前 server 以及 elasticsearch 整合運作，花了約三天的時間才弄得差不多，大概是資質有限吧！沒辦法遇到狀況很快釐清原因，雖然也跟過去沒有太多這方面經驗有關，總之還是把想要的流程串接起來了，謝天謝地！</p><h1 id="Lambda-Setup"><a href="#Lambda-Setup" class="headerlink" title="Lambda Setup"></a>Lambda Setup</h1><p>以前雖然有用過 lambda 開發過一些簡單的東西，可是通常僅限於直接在 lambda console 介面直接撰寫 node.js，唯一一次可以在本地端開發後上傳到 lambda 的小專案是使用別人包好的 <a href="https://github.com/ysugimoto/aws-lambda-image">aws-lambda-image</a> 這個自動針對 S3 image resize/reduce 的套件，只能說真的挺好用的，幫忙推薦一下：</p><span id="more"></span><p><strong>AWS Lambda Image</strong> : <a href="https://github.com/ysugimoto/aws-lambda-image">https://github.com/ysugimoto/aws-lambda-image</a><br>如果對於上傳到 S3 的圖片想另外做縮圖、壓縮，或是不同尺寸的圖片輸出時，我想這套件應該非常實用。</p><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><p>如果電腦有安裝 <a href="https://aws.amazon.com/tw/cli/">aws-cli</a> 的話，可以考慮參考 aws-lambda-image 專案裡面的 Makefile 檔案，是個很好的學習範本</p><p>這裡擷取部分內容，資料來源：<a href="https://github.com/ysugimoto/aws-lambda-image/blob/master/Makefile">https://github.com/ysugimoto/aws-lambda-image/blob/master/Makefile</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lambda:</span><br><span class="line">npm install .</span><br><span class="line">@echo &quot;Factory package files...&quot;</span><br><span class="line">      . . . . . . .</span><br><span class="line">@echo &quot;Create package archive...&quot;</span><br><span class="line">@cd build &amp;&amp; zip -rq aws-lambda-image.zip .</span><br><span class="line">@mv build/aws-lambda-image.zip ./</span><br><span class="line"></span><br><span class="line">uploadlambda: lambda</span><br><span class="line">@if [ -z &quot;$&#123;LAMBDA_FUNCTION_NAME&#125;&quot; ]; then (echo &quot;Please export LAMBDA_FUNCTION_NAME&quot; &amp;&amp; exit 1); fi</span><br><span class="line">aws lambda update-function-code --function-name $&#123;LAMBDA_FUNCTION_NAME&#125; --zip-file fileb://aws-lambda-image.zip</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">@echo &quot;clean up package files&quot;</span><br><span class="line">@if [ -f aws-lambda-image.zip ]; then rm aws-lambda-image.zip; fi</span><br><span class="line">@rm -rf build/*</span><br></pre></td></tr></table></figure><ul><li><code>make lambda</code> : 用來打包要準備上傳 lambda 的 zip 檔</li><li><code>make uploadlambda</code> : 透過 aws-cli 的指令來上傳 zip 檔</li><li><code>make clean</code> : 清除打包的資料</li></ul><p>而其中 <code>$&#123;LAMBDA_FUNCTION_NAME&#125;</code> 這個參數可以直接在環境中透過 export 的方式提前宣告，或是在執行 make 指令時，添加在後面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// xxxxxxxxx 是 AWS Lambda 上的函式名稱</span><br><span class="line">export LAMBDA_FUNCTION_NAME=xxxxxxxxx</span><br><span class="line"></span><br><span class="line">// ==== OR =====</span><br><span class="line"></span><br><span class="line">make uploadlambda -e LAMBDA_FUNCTION_NAME=xxxxxxxxx</span><br></pre></td></tr></table></figure><h2 id="Claudia-js"><a href="#Claudia-js" class="headerlink" title="Claudia.js"></a>Claudia.js</h2><p><a href="https://claudiajs.com/">claudia</a> 這套的功能就是讓你發佈 node.js 專案到 AWS Lambda 用的，本身也提供了很多教學可以參考，<a href="https://claudiajs.com/tutorials/index.html">教學範例</a>:</p><ul><li><a href="https://claudiajs.com/tutorials/installing.html">INSTALLING AND CONFIGURING CLAUDIA.JS</a></li><li><a href="https://claudiajs.com/tutorials/hello-world-lambda.html">HELLO WORLD AWS LAMBDA FUNCTION</a></li><li><a href="https://claudiajs.com/tutorials/hello-world-api-gateway.html">HELLO WORLD FROM API GATEWAY</a></li><li><a href="https://claudiajs.com/tutorials/hello-world-chatbot.html">HELLO WORLD CHAT-BOT USING LAMBDA</a></li><li><a href="https://claudiajs.com/tutorials/deploying-proxy-api.html">DEPLOYING A PROXY API</a></li></ul><p>然而 claudia 的一些操作指令，可以直接看 <a href="https://github.com/claudiajs/claudia">github</a> 上的<a href="https://github.com/claudiajs/claudia/tree/master/docs">說明文件</a>，但是我實在不想花太多時間一個一個慢慢摸索，所以一樣是參考 aws-lambda-image 這專案的 package.json 檔案，然後也只用到兩個指令</p><ul><li><a href="https://github.com/claudiajs/claudia/blob/master/docs/create.md">create</a> : 建立專案使用的指令，不過由於目前的專案有很多設定，所以我選擇手動在 AWS Lambda console 介面建立好函示，並且把相關設定弄好</li><li><a href="https://github.com/claudiajs/claudia/blob/master/docs/update.md">update</a> : 專案更新後，重新打包上傳用的指令</li></ul><h1 id="專案流程"><a href="#專案流程" class="headerlink" title="專案流程"></a>專案流程</h1><p>因為這次專案的流程，是 Server 發生某些需要更新搜尋引擎資料的事件時，先將事件送到 AWS SQS，然後再透過 SQS 觸發 Lambda 來更新 ElasticSearch 的內容，但是因為 ElasticSearch 是在 VPC 的環境內，所以 lambda 也要跟著放到 VPC 下，而 lambda 在更新資料的時候，需要透過 API 來跟 ECS 的 server 要資料，雖然 ECS 跟 lambda 都同樣在 VPC 下，可是 lambda 無法透過 private ip 來存取 API，所以最後解法是讓 lambda 可以從 VPC 內存取外部網路來發送 API，取回所需資料處理後再寫入 ElasticSearch 內。</p><p>這麼說完好像是個很複雜的流程，不過大致上畫一下流程就如下圖。</p><p><img src="/images/AWS/SQS_Lambda_Flow.png" alt="專案流程SQS_Lambda_ES"></p><h1 id="Lambda在VPC內存取網路"><a href="#Lambda在VPC內存取網路" class="headerlink" title="Lambda在VPC內存取網路"></a>Lambda在VPC內存取網路</h1><p>前面鋪成了這麼多，現在才要進入這次寫 blog 的重點，當初也是因為要處理這個流程，花了很久的時間才知道問題，然後才開始找這個方法。其實網路上已經有 AWS 專人教學的文章了，不過我還是想自己在寫一次，以我能理解的方式。</p><p>參考教學：</p><ul><li><a href="https://aws.amazon.com/premiumsupport/knowledge-center/internet-access-lambda-function">How can I grant internet access to my VPC Lambda function?</a></li><li><a href="https://medium.com/@philippholly/aws-lambda-enable-outgoing-internet-access-within-vpc-8dd250e11e12">AWS Lambda: Enable Outgoing Internet Access within VPC</a></li></ul><p>第一篇文章裡面還有精美的影片講解，我想英文跟我一樣不好的人，在看完教學影片，應該也要理解個80%了。根據我實作的結論，大概需要滿足底下這些條件</p><ul><li>Lambda 執行權限<ul><li>Lambda 在 VPC 下的網際網路存取權限(Required)</li><li>Lambda 執行時寫入 cloudwatch log 的權限(Optional，不過一般專案建立都會有，這樣才能再 CloudWatch 下查看 log)</li><li>Lambda 接收 SQS message 的基本操作權限(非必要，只是因為我專案本身需要)</li><li>Lambda 在 VPC 內操作 ElasticSearch 的基本權限(非必要，只是因為我專案本身需要)</li></ul></li><li>Lambda 網路設定<ul><li>位於 VPC 內</li><li>兩個私有子網路(Private Subnet)</li><li>安全群組傳出規則(Outbound rules)，連接埠 : 全部, 目的地 : 0.0.0.0/0</li></ul></li><li>VPC 設定<ul><li>一個 Public Subnet</li><li>兩個 Private Subnet</li><li>兩個 Route table，一個與 Public Subnet 關聯，一個與兩個 Private Subnet 關聯</li><li>Route table(with Public Subnet) 連接 Internet Gateway</li><li>替 Public Subnet 建立 NAT Gateway，並指定一組 Elastic IP</li><li>Route table(with Private Subnet) 連接 NAT Gateway</li></ul></li></ul><h2 id="VPC-設定步驟"><a href="#VPC-設定步驟" class="headerlink" title="VPC 設定步驟"></a>VPC 設定步驟</h2><p>底下的設定步驟，我只是照著<a href="https://youtu.be/JcRKdEP94jM">教學影片</a>來說明，如果有誤，麻煩再指正，感謝！</p><h3 id="建立三個-Subnet"><a href="#建立三個-Subnet" class="headerlink" title="建立三個 Subnet"></a>建立三個 Subnet</h3><p>建立三個 Subnet，一個用來連接外部 Internet，另外兩個為內部私有 Subnet<br><img src="/images/AWS/vpc_step1.png" alt="建立三個 Subnet"></p><h3 id="建立兩個-Route-Table"><a href="#建立兩個-Route-Table" class="headerlink" title="建立兩個 Route Table"></a>建立兩個 Route Table</h3><p>建立兩個 route table，之後一個用來設定連外，一個則是用來設定連內部 subnet 以及橋接用<br><img src="/images/AWS/vpc_step2.png" alt="建立兩個 Route Table"></p><h3 id="Route-table-關聯-Public-Subnet"><a href="#Route-table-關聯-Public-Subnet" class="headerlink" title="Route table 關聯 Public Subnet"></a>Route table 關聯 Public Subnet</h3><p>將一個要設定外連規則的 route table 與 public subnet 關聯<br><img src="/images/AWS/vpc_step3.png" alt="Route table 關聯 Public Subnet"></p><h3 id="Route-table-關聯-Private-Subnet"><a href="#Route-table-關聯-Private-Subnet" class="headerlink" title="Route table 關聯 Private Subnet"></a>Route table 關聯 Private Subnet</h3><p>將另一個 route table 與兩個內部 subnet 關聯<br><img src="/images/AWS/vpc_step4.png" alt="Route table 關聯 Private Subnet"></p><h3 id="建立-Internet-Gateway"><a href="#建立-Internet-Gateway" class="headerlink" title="建立 Internet Gateway"></a>建立 Internet Gateway</h3><p>建立 internet gateway 並與 VPC 關聯，這樣 VPC 才有外連的能力<br><img src="/images/AWS/vpc_step5.png" alt="建立 Internet Gateway"></p><h3 id="設定-Route-table-外連規則"><a href="#設定-Route-table-外連規則" class="headerlink" title="設定 Route table 外連規則"></a>設定 Route table 外連規則</h3><p>將建立好的 internet gateway 給要設定外連的 route table 來設定外連的規則</p><ul><li>新增一個 route : <code>0.0.0.0/0 -&gt; igw-xxxxx</code></li></ul><p><img src="/images/AWS/vpc_step6.png" alt="設定 Route table 外連規則"></p><h3 id="建立-NAT-Gateway"><a href="#建立-NAT-Gateway" class="headerlink" title="建立 NAT Gateway"></a>建立 NAT Gateway</h3><p>建立 nat gateway 來橋接內部子網路與連外的子網路</p><ul><li>建立時，選擇 public subnet</li><li>新增一個 Elastic IP (注意:每個 region 基本限制為五個 elastic ip)</li></ul><p><img src="/images/AWS/vpc_step7.png" alt="建立 NAT Gateway"></p><h3 id="設定-Route-table-橋接規則"><a href="#設定-Route-table-橋接規則" class="headerlink" title="設定 Route table 橋接規則"></a>設定 Route table 橋接規則</h3><p>替關聯內部 subnet 的 route table 增加規則</p><ul><li>新增一個 route : <code>0.0.0.0/0 -&gt; nat-xxxxxx</code></li></ul><p><img src="/images/AWS/vpc_step8.png" alt="設定 Route table 橋接規則"></p><h3 id="IAM-建立-Lambda-執行權限"><a href="#IAM-建立-Lambda-執行權限" class="headerlink" title="IAM 建立 Lambda 執行權限"></a>IAM 建立 Lambda 執行權限</h3><p>記得幫 Lambda 執行的角色增加 VPC 存取執行的權限</p><p><img src="/images/AWS/vpc_step9.png" alt="IAM 建立 Lambda 執行權限"></p><h3 id="Lambda-VPC-設定"><a href="#Lambda-VPC-設定" class="headerlink" title="Lambda VPC 設定"></a>Lambda VPC 設定</h3><p>回到 Lambda 內，檢查一下 VPC 的設定，選擇兩個 private subnet</p><p><img src="/images/AWS/vpc_step10.png" alt="Lambda VPC 設定"></p><p>底下是我自己畫的架構圖，不過沒有很確定這樣畫是不是正確，如果有人發現錯誤，麻煩再幫我指正，感謝！</p><p><img src="/images/AWS/Lambda_VPC_Internet.png" alt="Lambda於VPC內外連架構"></p><p>最後這些都做完後，可以利用底下的 code 檢查一下是否成功取得外部IP</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="function"><span class="keyword">function</span>(<span class="params">event, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> option = &#123;</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;api.ipify.org&quot;</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/?format=JSON&quot;</span>,</span><br><span class="line">    <span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  callback(<span class="literal">null</span>, Request(option).</span><br><span class="line">    then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;IP = &#x27;</span>, data);</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Request</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> req = http.request(options, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="comment">// console.log(&#x27;Status:&#x27;, res.statusCode);</span></span><br><span class="line">      <span class="comment">// console.log(&#x27;Headers:&#x27;, JSON.stringify(res.headers));</span></span><br><span class="line">      res.setEncoding(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">      res.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> body += chunk);</span><br><span class="line">      res.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;Successfully processed HTTP response&#x27;);</span></span><br><span class="line">        <span class="comment">// If we know it&#x27;s JSON, parse it</span></span><br><span class="line">        <span class="keyword">if</span> (res.headers[<span class="string">&#x27;content-type&#x27;</span>] === <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">            body = <span class="built_in">JSON</span>.parse(body);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve(body);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;);</span><br><span class="line">    req.write(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    req.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;目前需要 Lambda 在 VPC 下運作，才能連接到 VPC 下的 ElasticSearch，但是有需要有外連網路的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近開始在使用 AWS Lambda，為了能跟目前 server 以及 elasticsearch 整合運作，花了約三天的時間才弄得差不多，大概是資質有限吧！沒辦法遇到狀況很快釐清原因，雖然也跟過去沒有太多這方面經驗有關，總之還是把想要的流程串接起來了，謝天謝地！&lt;/p&gt;
&lt;h1 id=&quot;Lambda-Setup&quot;&gt;&lt;a href=&quot;#Lambda-Setup&quot; class=&quot;headerlink&quot; title=&quot;Lambda Setup&quot;&gt;&lt;/a&gt;Lambda Setup&lt;/h1&gt;&lt;p&gt;以前雖然有用過 lambda 開發過一些簡單的東西，可是通常僅限於直接在 lambda console 介面直接撰寫 node.js，唯一一次可以在本地端開發後上傳到 lambda 的小專案是使用別人包好的 &lt;a href=&quot;https://github.com/ysugimoto/aws-lambda-image&quot;&gt;aws-lambda-image&lt;/a&gt; 這個自動針對 S3 image resize/reduce 的套件，只能說真的挺好用的，幫忙推薦一下：&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://soarlin.github.io/categories/AWS/"/>
    
    
    <category term="lambda" scheme="https://soarlin.github.io/tags/lambda/"/>
    
    <category term="elasticsearch" scheme="https://soarlin.github.io/tags/elasticsearch/"/>
    
    <category term="SQS" scheme="https://soarlin.github.io/tags/SQS/"/>
    
    <category term="vpc" scheme="https://soarlin.github.io/tags/vpc/"/>
    
    <category term="subnet" scheme="https://soarlin.github.io/tags/subnet/"/>
    
    <category term="internet gateway" scheme="https://soarlin.github.io/tags/internet-gateway/"/>
    
    <category term="nat gateway" scheme="https://soarlin.github.io/tags/nat-gateway/"/>
    
  </entry>
  
  <entry>
    <title>Vue.Js 專案開發紀錄 Part 3</title>
    <link href="https://soarlin.github.io/2018/08/12/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-3/"/>
    <id>https://soarlin.github.io/2018/08/12/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-3/</id>
    <published>2018-08-12T01:44:28.000Z</published>
    <updated>2022-07-28T04:58:07.427Z</updated>
    
    <content type="html"><![CDATA[<p>距離上次寫這個開發紀錄，已經過了快一個月，都忘了當初寫的感覺，以及要記錄的東西有哪些了</p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>存取 API 的部分，基本上就是用 axios 來做 ajax，不過這次參考了某篇文章的做法，把 API 在傳送前跟接收後都做了一層共同的處理，因為在處理 CROS 的時候，每次 API 的 header 都有些相同的資訊要傳送，所以就另外抽出來實作，而接收端的話，就一起針對錯誤情況做些簡單的處理。</p><span id="more"></span><p>所以另外寫了一個 interceptor.js 來處理，另外在發起 POST 的 request 時，如果 Content-Type 不是 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>或<code>text/plain</code>，會變成 <code>Preflighted</code> 請求，變成在 POST 前會先有個 OPTION 的請求，後端在寫 Allow Methods 裡面，記得把 OPTIONS 加進去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import i18n from &#x27;@/i18n&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">// 判斷目前環境，來決定 API 網址</span><br><span class="line">import &#123; getAPIBaseUrl &#125; from &#x27;./helpers&#x27;</span><br><span class="line">　　</span><br><span class="line">/**</span><br><span class="line"> * Config</span><br><span class="line"> */</span><br><span class="line">axios.defaults.baseURL = getAPIBaseUrl()</span><br><span class="line">axios.defaults.timeout = 10000</span><br><span class="line">axios.defaults.transformRequest = (data) =&gt; &#123; return JSON.stringify(data) &#125;</span><br><span class="line">// header 資訊帶 cookie，但是後端不能設置 Access-Control-Allow-Origin: &#x27;*&#x27;,</span><br><span class="line">axios.defaults.withCredentials = true</span><br><span class="line">axios.defaults.headers = &#123;</span><br><span class="line">  &#x27;Accept&#x27;: &#x27;application/json&#x27;,</span><br><span class="line">  &#x27;Content-Type&#x27;: &#x27;application/json;charset=UTF-8&#x27;,</span><br><span class="line">  &#x27;Accept-Language&#x27;: i18n.locale</span><br><span class="line">&#125;</span><br><span class="line">　　</span><br><span class="line">/**</span><br><span class="line"> * 發送前處理</span><br><span class="line"> */</span><br><span class="line">axios.interceptors.request.use(config =&gt; &#123;</span><br><span class="line">  return config</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">  console.group(&#x27;[Axios][Interceptor] Request Error&#x27;)</span><br><span class="line">  console.log(error)</span><br><span class="line">  console.groupEnd()</span><br><span class="line">  return Promise.reject(error.response)</span><br><span class="line">&#125;)</span><br><span class="line">　　</span><br><span class="line">/**</span><br><span class="line"> * 發送後處理</span><br><span class="line"> */</span><br><span class="line">axios.interceptors.response.use(data =&gt; &#123;</span><br><span class="line">  return data.data</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">  console.group(&#x27;[Axios][Interceptor] Response Error&#x27;)</span><br><span class="line">  console.log(error)</span><br><span class="line">  console.groupEnd()</span><br><span class="line">  let errorMsg = error.message</span><br><span class="line">  if (error.response !== undefined) &#123;</span><br><span class="line">    errorMsg = error.response.data.message</span><br><span class="line">  &#125;</span><br><span class="line">  return Promise.reject(errorMsg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default axios</span><br></pre></td></tr></table></figure><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><p>整個專案最先被載入的檔案，基本上就是把所有該 package 起來的檔案都先 import 進來</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">// 最外層頁面的 vue 檔</span><br><span class="line">import App from &#x27;./pages/App&#x27;</span><br><span class="line">// router</span><br><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line">// Vuex</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">// Vue-axios</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import VueAxios from &#x27;vue-axios&#x27;</span><br><span class="line">　　</span><br><span class="line">// Semantic UI，這次專案用到的 CSS Framework</span><br><span class="line">import &#x27;semantic-ui-css/semantic.min.css&#x27;</span><br><span class="line">import &#x27;semantic-ui-css/semantic.min.js&#x27;</span><br><span class="line">import &#x27;semantic-ui-calendar/dist/calendar.css&#x27;</span><br><span class="line">// custom semantic-ui-calendar js file</span><br><span class="line">import &#x27;./assets/semantic-ui-calendar/calendar.js&#x27;</span><br><span class="line">　　</span><br><span class="line">// vuex-store</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line">// i18n</span><br><span class="line">import i18n from &#x27;./i18n&#x27;</span><br><span class="line">// Swiper</span><br><span class="line">import VueAwesomeSwiper from &#x27;vue-awesome-swiper&#x27;</span><br><span class="line">// Firebase Cloud Messaging</span><br><span class="line">import firebase from &#x27;firebase/app&#x27;</span><br><span class="line">import &#x27;firebase/messaging&#x27;</span><br><span class="line">　　</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">// Vue-axios</span><br><span class="line">Vue.use(VueAxios, axios)</span><br><span class="line">// Swiper</span><br><span class="line">Vue.use(VueAwesomeSwiper)</span><br><span class="line">　　</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line">　　</span><br><span class="line">// init Firebase</span><br><span class="line">firebase.initializeApp(process.env.FIREBASE_CONFIG)</span><br><span class="line">// 為了方便使用，把 firebase messaging 寫到 Vue 的 prototype</span><br><span class="line">// Retrieve Firebase Messaging object, assign to Vue Object</span><br><span class="line">Vue.prototype.$messaging = firebase.messaging()</span><br><span class="line">// Add the public key generated from the Firebase console</span><br><span class="line">Vue.prototype.$messaging.usePublicVapidKey(process.env.VAPID_KEY)</span><br><span class="line">// Change server-worker.js register path</span><br><span class="line">navigator.serviceWorker.register(&#x27;/static/firebase-messaging-sw.js&#x27;)</span><br><span class="line">  .then((registration) =&gt; &#123;</span><br><span class="line">    Vue.prototype.$swRegistration = registration</span><br><span class="line">    Vue.prototype.$messaging.useServiceWorker(registration)</span><br><span class="line">  &#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">　　</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  i18n,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p>其實有點猶豫該不該寫測試的東西，因為我的測試有點胡亂寫，想到啥寫啥，也沒有詳細的 unit test，似乎就只是針對 component 裡面的畫面跟 method 盡可能地把測試寫一輪，還沒有把所有情況都寫進去，感覺就是有寫有交代…XD，所以還滿想有人可以來指導一下，測試的部分該怎麼規劃跟實作才能算是比較完善的測試。</p><h2 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h2><p>專案的測試當初在建立的時候，選用 jest，使用的套件應該是 <code>vue-jest</code>，為了把測試的環境改到可以順利執行，當初也是花了好一番功夫，因為有用到 <code>window.localStorage</code> 以及 jquery 用法與 i18n 設定</p><p><strong>unit/setup.js</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import $ from &#x27;jquery&#x27;</span><br><span class="line">import &#x27;mock-local-storage&#x27; // 算是實作 localStorage 的行為並且複寫 global 與 window</span><br><span class="line">// 載入 jQuery</span><br><span class="line">global.$ = global.jQuery = $</span><br><span class="line">　　</span><br><span class="line">// 模擬 window.localStorage</span><br><span class="line">global.window = &#123;&#125;</span><br><span class="line">window.localStorage = global.localStorage</span><br><span class="line">// 預設用中文語系測試</span><br><span class="line">global.localStorage.setItem(&#x27;LANGUAGE&#x27;, &#x27;zh-TW&#x27;)</span><br><span class="line">　　</span><br><span class="line">Vue.config.productionTip = false</span><br></pre></td></tr></table></figure><p><strong>jest.conf.js</strong> 這隻只有稍微調整一些東西</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">　　</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  rootDir: path.resolve(__dirname, &#x27;../../&#x27;),</span><br><span class="line">  moduleFileExtensions: [</span><br><span class="line">    &#x27;js&#x27;,</span><br><span class="line">    &#x27;json&#x27;,</span><br><span class="line">    &#x27;vue&#x27;</span><br><span class="line">  ],</span><br><span class="line">  moduleNameMapper: &#123;</span><br><span class="line">    &#x27;^@/(.*)$&#x27;: &#x27;&lt;rootDir&gt;/src/$1&#x27;,</span><br><span class="line">    &#x27;\\.(css)$&#x27;: &#x27;&lt;rootDir&gt;/node_modules/jest-css-modules&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  transform: &#123;</span><br><span class="line">    &#x27;^.+\\.js$&#x27;: &#x27;&lt;rootDir&gt;/node_modules/babel-jest&#x27;,</span><br><span class="line">    &#x27;.*\\.(vue)$&#x27;: &#x27;&lt;rootDir&gt;/node_modules/vue-jest&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  testPathIgnorePatterns: [</span><br><span class="line">    &#x27;&lt;rootDir&gt;/test/e2e&#x27;</span><br><span class="line">  ],</span><br><span class="line">  snapshotSerializers: [&#x27;&lt;rootDir&gt;/node_modules/jest-serializer-vue&#x27;],</span><br><span class="line">  setupFiles: [&#x27;&lt;rootDir&gt;/test/unit/setup&#x27;],</span><br><span class="line">  // --&gt; Option &quot;mapCoverage&quot; has been removed, as it&#x27;s no longer necessary.</span><br><span class="line">  // mapCoverage: true,</span><br><span class="line">  coverageDirectory: &#x27;&lt;rootDir&gt;/test/unit/coverage&#x27;,</span><br><span class="line">  collectCoverageFrom: [</span><br><span class="line">    &#x27;src/**/*.&#123;js,vue&#125;&#x27;,</span><br><span class="line">    &#x27;!src/assets/**/*.js&#x27;,  // 這裏用來避免自己客製化的檔案被算入</span><br><span class="line">    &#x27;!src/main.js&#x27;,</span><br><span class="line">    &#x27;!src/router/index.js&#x27;,</span><br><span class="line">    &#x27;!**/node_modules/**&#x27;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後進入測試 component 的部分，也是慢慢摸索出怎麼寫，先不管是否符合單元測試或整合測試，我還是先以能夠個別測試過 xxx.vue 的檔案為主，而測試的撰寫，可以參考<a href="https://vue-test-utils.vuejs.org/zh/guides/">Vue Test Unit</a></p><p><strong>XXXXX.sepc.js</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; shallow, createLocalVue &#125; from &#x27;@vue/test-utils&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">import VueI18n from &#x27;vue-i18n&#x27;</span><br><span class="line">import i18n from &#x27;@/i18n&#x27;</span><br><span class="line">import router from &#x27;@/router&#x27;</span><br><span class="line">import moment from &#x27;moment&#x27;</span><br><span class="line">　　</span><br><span class="line">import &#x27;semantic-ui-css/semantic.min.js&#x27;</span><br><span class="line">import &#x27;@/assets/semantic-ui-calendar/calendar&#x27;</span><br><span class="line">　　</span><br><span class="line">// Component</span><br><span class="line">import Component from &#x27;@/pages/&lt;path-to-component&gt;.vue&#x27;　　</span><br><span class="line">// Mixin</span><br><span class="line">import tools from &#x27;@/mixin/tools&#x27;</span><br><span class="line">// Stubs</span><br><span class="line">import TimePicker from &#x27;@/components/time-picker&#x27;</span><br><span class="line"></span><br><span class="line">const localVue = createLocalVue()</span><br><span class="line">localVue.use(Vuex)</span><br><span class="line">localVue.use(VueI18n)</span><br><span class="line">localVue.use(router)</span><br><span class="line">localVue.mixin(tools)</span><br><span class="line">　　</span><br><span class="line">describe(&#x27;Login.vue&#x27;, () =&gt; &#123;</span><br><span class="line">  let getters</span><br><span class="line">  let actions</span><br><span class="line">  let store</span><br><span class="line">  let wrapper</span><br><span class="line">　　</span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    // 元件內使用到 store 內的 getter</span><br><span class="line">    getters = &#123;</span><br><span class="line">      getXXXXXXX: () =&gt; &#x27;ooxxxx&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    // 元件內使用到 store 內的 actions</span><br><span class="line">    actions = &#123;</span><br><span class="line">      setOOXXXX: jest.fn()</span><br><span class="line">    &#125;</span><br><span class="line">    store = new Vuex.Store(&#123;</span><br><span class="line">      state: &#123;</span><br><span class="line">        loading: false,</span><br><span class="line">        lang: &#x27;zh-TW&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      getters,</span><br><span class="line">      actions</span><br><span class="line">    &#125;)</span><br><span class="line">    stubs = &#123;</span><br><span class="line">      &#x27;time-picker&#x27;: TimePicker</span><br><span class="line">    &#125;</span><br><span class="line">    wrapper = shallow(Component, &#123; i18n, router, store, stubs, localVue &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">　　</span><br><span class="line">  it(&#x27;mounted &amp; computed test&#x27;, () =&gt; &#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>寫到最後，已經不曉得該怎麼寫了，總而言之就先把目前專案開發的一些事項筆記下來，雖然可能過兩年就不能再使用了，畢竟前端的技術推陳出新，一直有新工具跑出來，讓學習的人覺得困擾，很難再學一次吃好幾年了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;距離上次寫這個開發紀錄，已經過了快一個月，都忘了當初寫的感覺，以及要記錄的東西有哪些了&lt;/p&gt;
&lt;h2 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h2&gt;&lt;p&gt;存取 API 的部分，基本上就是用 axios 來做 ajax，不過這次參考了某篇文章的做法，把 API 在傳送前跟接收後都做了一層共同的處理，因為在處理 CROS 的時候，每次 API 的 header 都有些相同的資訊要傳送，所以就另外抽出來實作，而接收端的話，就一起針對錯誤情況做些簡單的處理。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="vuex" scheme="https://soarlin.github.io/tags/vuex/"/>
    
    <category term="vuejs" scheme="https://soarlin.github.io/tags/vuejs/"/>
    
    <category term="axios" scheme="https://soarlin.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Vue.Js 專案開發紀錄 Part 2</title>
    <link href="https://soarlin.github.io/2018/07/22/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-2/"/>
    <id>https://soarlin.github.io/2018/07/22/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-2/</id>
    <published>2018-07-22T07:01:49.000Z</published>
    <updated>2022-07-28T04:58:07.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mixin-內容"><a href="#mixin-內容" class="headerlink" title="mixin 內容"></a>mixin 內容</h2><p>這裡是以前的習慣養成的，其實不一定是個好作法，我會將某些 .vue 裡面，可以共用的 method 或是某些比較獨立的 method 抽出來另外做成 mixin 然後在 import 來用，雖然立意良好，但實際執行上，有時會變成把一個很大的 .vue 檔抽出部分 method 放去 mixin 來使用。</p><span id="more"></span><h2 id="pages-內容"><a href="#pages-內容" class="headerlink" title="pages 內容"></a>pages 內容</h2><p>這裡才是放我主要網站頁面架構的 vue 元件，目前分成四個目錄以及一個 Home.vue 與 App.vue 檔</p><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><p>這是原本專案建立時產生的 vue 檔，基本上所有內容都在從這裡面產生，底下的範例雖然會透過判斷 <code>getLoading</code> 來切換 loading 與顯示畫面，不過我後來實際開發時，把每個頁面或是每個區塊 loading 又另外做處理，所以最外層這個 loading 就沒再用了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;getLoading&quot; class=&quot;ui active inverted dimmer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;ui text loader&quot;&gt;Loading&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;router-view class=&quot;body&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      &#x27;getLoading&#x27;</span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    console.log(&#x27;App created&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;sass&quot;&gt;</span><br><span class="line">.body</span><br><span class="line">  margin: 0</span><br><span class="line">  padding: 0</span><br><span class="line">  width: 100%</span><br><span class="line">  height: 100%</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>整個 App.vue 裡面主要就放一個 <code>&lt;router-view /&gt;</code>，讓 vue-router 來處理要渲染的內容，一開始的頁面是根目錄 <code>/</code>，所以會依據 routes 裡設定 path 為 <code>/</code> 來載入頁面，而這頁就是 Home.vue，所以簡單來說 App.vue 就是包住整個 route 要渲染的內容，而一開始渲染 <code>/</code> 這個路徑的檔案</p><h2 id="router-內容"><a href="#router-內容" class="headerlink" title="router 內容"></a>router 內容</h2><p>這部分才是重點之一，畢竟過去開發 vue.js 的經驗都是某個頁面內需要複雜操作的時候，才將該區塊改寫成 vue.js，然後載入頁面的時候一起把 build 好的 js 載入使用，而這次真的要靠 vue.js 來架構整個網站的路徑，所以也是第一次學習怎麼寫前端 route</p><p>使用 <a href="https://router.vuejs.org/">vue-router</a> Vue.js 官方的路由管理器，底下例子會用到</p><ul><li>HTML5 History Mode</li><li>Nested Routes 嵌套路由</li><li>Route Meta Fields(路由元信息) 用來判斷是否需要驗證用戶登入狀態</li><li>Navigation Guards 的 Global Guards，用來作用戶登入檢查</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Router from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">import store from &#x27;../store/index&#x27;</span><br><span class="line"></span><br><span class="line">import Home from &#x27;@/pages/Home&#x27;</span><br><span class="line">　　　</span><br><span class="line">// Auth: Login, ResetPassword</span><br><span class="line">import Login from &#x27;@/pages/auth/login&#x27;</span><br><span class="line">　　　</span><br><span class="line">// Product Page</span><br><span class="line">import Products from &#x27;@/pages/products/products-root&#x27;</span><br><span class="line">import ProductsWeekly from &#x27;@/pages/products/products-weekly&#x27;</span><br><span class="line">import ProductsMonthly from &#x27;@/pages/products/products-monthly&#x27;</span><br><span class="line">　　　</span><br><span class="line">Vue.use(Router)</span><br><span class="line">　　　</span><br><span class="line">const router = new Router(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/&#x27;,</span><br><span class="line">      name: &#x27;Home&#x27;,</span><br><span class="line">      component: Home,</span><br><span class="line">      meta: &#123; requiresAuth: true &#125;,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &#x27;products&#x27;,</span><br><span class="line">          name: &#x27;Products&#x27;,</span><br><span class="line">          component: Products,</span><br><span class="line">          meta: &#123; requiresAuth: true &#125;,</span><br><span class="line">          children: [</span><br><span class="line">            &#123;</span><br><span class="line">              path: &#x27;weekly&#x27;,</span><br><span class="line">              name: &#x27;ProductsWeekly&#x27;,</span><br><span class="line">              component: ProductsWeekly,</span><br><span class="line">              meta: &#123; requiresAuth: true &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              path: &#x27;monthly&#x27;,</span><br><span class="line">              name: &#x27;ProductsMonthly&#x27;,</span><br><span class="line">              component: ProductsMonthly,</span><br><span class="line">              meta: &#123; requiresAuth: true &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/login&#x27;,</span><br><span class="line">      name: &#x27;Login&#x27;,</span><br><span class="line">      component: Login,</span><br><span class="line">      meta: &#123; requiresAuth: false &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 當 url path 不符合 router 表的時候，預設轉址到</span><br><span class="line">    // 順序一定要最後面</span><br><span class="line">    &#123; path: &#x27;/*&#x27;, redirect: &#x27;/login&#x27; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const isLogged = function () &#123;</span><br><span class="line">  let storeLoggedIn = store.getters.getLoggedIn</span><br><span class="line">  let sessionLoggedIn = sessionStorage.getItem(&#x27;LoggedIn&#x27;)</span><br><span class="line">  return storeLoggedIn || sessionLoggedIn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;to=&#x27;, to.fullPath, &#x27;| from=&#x27;, from.fullPath)</span><br><span class="line">  if (to.matched.some(record =&gt; record.meta.requiresAuth) &amp;&amp; !isLogged()) &#123;</span><br><span class="line">    // 如果 router 轉跳的頁面需要驗證 requiresAuth: true</span><br><span class="line">    // 尚未登入時，導向 login 頁面, 網址帶入 redirect，以便登入後重新導向</span><br><span class="line">    next(&#123;</span><br><span class="line">      path: &#x27;/login&#x27;,</span><br><span class="line">      query: &#123; redirect: to.fullPath &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next() // 往下繼續執行</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h2 id="store-內容"><a href="#store-內容" class="headerlink" title="store 內容"></a>store 內容</h2><p>這也是主要重點之一，Vue.js 的狀態管理模式 <a href="https://vuex.vuejs.org/zh/">vuex</a> 相關的檔案都放在這邊了，開發過程中需要搭配 <a href="https://github.com/vuejs/vue-devtools">devtools extension</a> 的 Chrome 插件來使用，包保事半功倍</p><h3 id="目錄結構"><a href="#目錄結構" class="headerlink" title="目錄結構"></a>目錄結構</h3><p>目前的目錄結構如下，為了功能細分，所以有拆出 modules，以及 root.js 來放切換語系等功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/store</span><br><span class="line">├── index.js</span><br><span class="line">├── modules</span><br><span class="line">│   ├── auth.js</span><br><span class="line">│   ├── notify.js</span><br><span class="line">│   ├── orders.js</span><br><span class="line">│   ├── products.js</span><br><span class="line">│   ├── resources.js</span><br><span class="line">│   └── token.js</span><br><span class="line">└── root.js</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><p>index.js 的內容大致如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">　　　</span><br><span class="line">// root</span><br><span class="line">import &#123; state, actions, mutations, getters &#125; from &#x27;./root.js&#x27;</span><br><span class="line">　　　</span><br><span class="line">// modules</span><br><span class="line">import auth from &#x27;./modules/auth&#x27;</span><br><span class="line">import products from &#x27;./modules/products&#x27;</span><br><span class="line">　　　</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">　　　</span><br><span class="line">const debug = process.env.NODE_ENV !== &#x27;production&#x27;</span><br><span class="line">　　　</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  // root</span><br><span class="line">  state,</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  getters,</span><br><span class="line">  // 整理過的 modules</span><br><span class="line">  modules: &#123;</span><br><span class="line">    auth,</span><br><span class="line">    products,</span><br><span class="line">  &#125;,</span><br><span class="line">  strict: debug</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="root-js"><a href="#root-js" class="headerlink" title="root.js"></a>root.js</h3><p>而 root.js 放了些 global 使用的 state 與比較重要的語系切換設定，這裡只列出切換語言的相關程式碼</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 為了設定語系引入 Vue</span><br><span class="line">import i18n from &#x27;@/i18n&#x27;</span><br><span class="line">　　　</span><br><span class="line">export const types = &#123;</span><br><span class="line">  SET_LANGUAGE: &#x27;SET_LANGUAGE&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">export const state = &#123;</span><br><span class="line">  lang: localStorage.getItem(&#x27;LANGUAGE&#x27;) || &#x27;zh-TW&#x27;</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">export const getters = &#123;</span><br><span class="line">  getLanguage: state =&gt; state.lang,</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">export const actions = &#123;</span><br><span class="line">  setLanguage (&#123; commit &#125;, lang) &#123;</span><br><span class="line">    commit(types.SET_LANGUAGE, lang)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">export const mutations = &#123;</span><br><span class="line">  [types.SET_LANGUAGE] (state, setlang) &#123;</span><br><span class="line">    state.lang = setlang</span><br><span class="line">    localStorage.setItem(&#x27;LANGUAGE&#x27;, setlang)</span><br><span class="line">    // 改變全域語系設定</span><br><span class="line">    i18n.locale = state.lang</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在 vue component 切換語系時，只要呼叫 <code>setLanguage</code> 就好</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">changeLanguage (value) &#123;</span><br><span class="line">  this.$store.dispatch(&#x27;setLanguage&#x27;, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><p>而其他 store 模組，大致上如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const state = &#123;</span><br><span class="line">  payload: null</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">const getters = &#123;</span><br><span class="line">  getPayload: state =&gt; state.payload</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">const actions = &#123;</span><br><span class="line">  acitonName (&#123; commit &#125;, payload) &#123;</span><br><span class="line">    commit(mutationFunc, payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">const mutations = &#123;</span><br><span class="line">  mutationFunc (state, payload) &#123;</span><br><span class="line">    state.payload = payload</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">　　　</span><br><span class="line">export default &#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">  mutations</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>雖然看起來都只是把寫過的 code 貼上來，畢竟也是當初花了不少時間寫的，雖然有資料可以參考，參考的資料都是比較精簡的，真的要應用到專案裡，還是有很多需要自己調整的部分，做這個紀錄也只是為了之後有跡可循可以自己參考用</p><p>未完…待續….</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;mixin-內容&quot;&gt;&lt;a href=&quot;#mixin-內容&quot; class=&quot;headerlink&quot; title=&quot;mixin 內容&quot;&gt;&lt;/a&gt;mixin 內容&lt;/h2&gt;&lt;p&gt;這裡是以前的習慣養成的，其實不一定是個好作法，我會將某些 .vue 裡面，可以共用的 method 或是某些比較獨立的 method 抽出來另外做成 mixin 然後在 import 來用，雖然立意良好，但實際執行上，有時會變成把一個很大的 .vue 檔抽出部分 method 放去 mixin 來使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="vuex" scheme="https://soarlin.github.io/tags/vuex/"/>
    
    <category term="vuejs" scheme="https://soarlin.github.io/tags/vuejs/"/>
    
    <category term="i18n" scheme="https://soarlin.github.io/tags/i18n/"/>
    
    <category term="webpack" scheme="https://soarlin.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 專案開發紀錄 Part 1</title>
    <link href="https://soarlin.github.io/2018/07/22/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-1/"/>
    <id>https://soarlin.github.io/2018/07/22/vue-project-%E9%96%8B%E7%99%BC%E7%B4%80%E9%8C%84-1/</id>
    <published>2018-07-22T01:24:42.000Z</published>
    <updated>2022-07-28T04:58:07.427Z</updated>
    
    <content type="html"><![CDATA[<p>頭一次用 Vue.js 來開發整個網站的專案，雖然還沒全部做完，還是先來做一下至目前為止的一些記錄，提供日後有需要的時候可以參考。專案是使用 vue-cli 3.0 版本產生的，環境所需 <code>Node &gt;=8.</code>，目前本機環境 node.js v6.9.5，因為有舊專案的需求，所以不敢直接更新上去，所以使用 nvm 來安裝不同版本的 node.js</p><span id="more"></span><p>初始化專案指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue init webpack &lt;project-name&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 這裏 project-name 以 vue-hello 為例</span><br><span class="line"></span><br><span class="line">? Project name vue-hello</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author Soar &lt;soar.lin@gmail.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? Set up unit tests Yes</span><br><span class="line">? Pick a test runner jest</span><br><span class="line">? Setup e2e tests with Nightwatch? Yes</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recommended) (Use arrow keys) yarn</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;vue-hello&quot;.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Installing project dependencies ...</span><br><span class="line"># ========================</span><br><span class="line">yarn install v1.3.2</span><br><span class="line">info No lockfile found.</span><br><span class="line">[1/5] 🔍  Validating package.json...</span><br><span class="line">[2/5] 🔍  Resolving packages...</span><br><span class="line">.....</span><br><span class="line">[3/5] 🚚  Fetching packages...</span><br><span class="line">[##############################################################################################------------------------] 975/1223</span><br><span class="line">   vue-cli · Generated &quot;vue-hello&quot;.</span><br><span class="line"></span><br><span class="line"># Installing project dependencies ...</span><br><span class="line">[4/5] 🔗  Linking dependencies...</span><br><span class="line">[5/5] 📃  Building fresh packages...</span><br><span class="line">success Saved lockfile.</span><br><span class="line">✨  Done in 68.73s.</span><br><span class="line"></span><br><span class="line">Running eslint --fix to comply with chosen preset rules...</span><br><span class="line"># ========================</span><br><span class="line"></span><br><span class="line">yarn run v1.3.2</span><br><span class="line">$ eslint --ext .js,.vue src test/unit test/e2e/specs --fix</span><br><span class="line">✨  Done in 2.24s.</span><br><span class="line"></span><br><span class="line"># Project initialization finished!</span><br><span class="line"># ========================</span><br><span class="line"></span><br><span class="line">To get started:</span><br><span class="line"></span><br><span class="line">  cd vue-hello</span><br><span class="line">  npm run dev</span><br><span class="line"></span><br><span class="line">Documentation can be found at https://vuejs-templates.github.io/webpack</span><br></pre></td></tr></table></figure><h1 id="專案目錄演進"><a href="#專案目錄演進" class="headerlink" title="專案目錄演進"></a>專案目錄演進</h1><p><img src="/images/vue2/project-src.png" alt="Vue專案目錄結構演進"></p><p>綠色框框的部分，隨著專案持續開發下去，內容越來越多，也持續在做些目錄的調整，雖然覺得還可以改得更好，不過目前專案就一人開發，所以我覺得還行就這麼繼續下去了。</p><h2 id="assets-內容"><a href="#assets-內容" class="headerlink" title="assets 內容"></a>assets 內容</h2><p>assets 的內容主要都用來放些程式在編譯時，會共用到的檔案，由於不想把圖檔一起做編譯，所以後來都移到 <code>/static/images/</code> 下了，而 <code>semantic-ui-calendar</code> 則是因為手動調整了一些這個套件的內容，雖然發了 pull request，不過該專案的作者似乎不太想理我…Orz，所以只好每次編譯都得另外載入自己修改的 js 檔</p><p>而 <code>/assets/sass/</code> 下目前放著兩個檔案，每次 vue component 編譯時，皆會預先載入 resources.sass，然後再透過 resources.sass 來 <code>import common.sass</code>，至於修改方式在上一篇文章有<a href="http://soarlin.github.io/2018/06/02/Vue-%E4%BD%BF%E7%94%A8Firebase-Cloud-Messaging/#Vue-%E5%B0%88%E6%A1%88%E5%85%A7%E4%BD%BF%E7%94%A8%E5%85%B1%E5%90%8C-SASS-%E8%B3%87%E6%BA%90">寫道</a></p><ul><li>resources.sass : 用來定義CSS顏色變數，mixin function，media query 語法等等</li><li>common.sass : 用來撰寫一些客製化的共通元件 style，如：sidebar, modal, button …等</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// resources.sass</span><br><span class="line">　　　</span><br><span class="line">/* Colors */</span><br><span class="line">$greeny-blue: #34aeab</span><br><span class="line">$grapefruit: #fc5857</span><br><span class="line">$flat-blue: #398eab</span><br><span class="line">$denim: #366474</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">@mixin ellipsis($line:1)</span><br><span class="line">  text-overflow: ellipsis</span><br><span class="line">  overflow: hidden</span><br><span class="line"></span><br><span class="line">  @if $line == 1</span><br><span class="line">    white-space: nowrap</span><br><span class="line">  @else</span><br><span class="line">    display: -webkit-box</span><br><span class="line">    -webkit-line-clamp: $line</span><br><span class="line">    -webkit-box-orient: vertical</span><br><span class="line"></span><br><span class="line">@mixin size($w, $h:$w, $bdrs:0)</span><br><span class="line">  width: $w</span><br><span class="line">  height: $h</span><br><span class="line">  border-radius: $bdrs</span><br><span class="line"></span><br><span class="line">@mixin flex($jc:center, $ai:center)</span><br><span class="line">  display: flex</span><br><span class="line">  justify-content: $jc</span><br><span class="line">  align-items: $ai</span><br><span class="line"></span><br><span class="line">/* large desktop */</span><br><span class="line">$desktop-lg-min: 1200px;</span><br><span class="line">/* normal desktop range */</span><br><span class="line">$desktop-max:    1199px;</span><br><span class="line">$desktop-min:     992px;</span><br><span class="line">/* tablet range */</span><br><span class="line">$tablet-max:      991px;</span><br><span class="line">$tablet-min:      768px;</span><br><span class="line">$mobile-max:      767px;</span><br><span class="line">$mobile-min:      480px;</span><br><span class="line"></span><br><span class="line">@mixin lg-desktop</span><br><span class="line">  @media screen and (min-width: $desktop-lg-min)</span><br><span class="line">    @content</span><br><span class="line">@mixin desktop</span><br><span class="line">  @media screen and (max-width: $desktop-max)</span><br><span class="line">    @content</span><br><span class="line">@mixin tablet</span><br><span class="line">  @media screen and (max-width: $tablet-max)</span><br><span class="line">    @content</span><br><span class="line">@mixin phone</span><br><span class="line">  @media screen and (max-width: $mobile-max)</span><br><span class="line">    @content</span><br><span class="line">@mixin phoneV</span><br><span class="line">  @media screen and (max-width: $mobile-min)</span><br><span class="line">    @content</span><br><span class="line"></span><br><span class="line">/* margin-top 10~100 */</span><br><span class="line">@for $i from 1 through 10</span><br><span class="line">  .mt#&#123;$i&#125;0</span><br><span class="line">    margin-top: $i * 10px</span><br><span class="line"></span><br><span class="line">/* margin-bottom 10~100 */</span><br><span class="line">@for $i from 1 through 10</span><br><span class="line">  .mb#&#123;$i&#125;0</span><br><span class="line">    margin-bottom: $i * 10px</span><br><span class="line"></span><br><span class="line">@import &#x27;./common.sass&#x27;</span><br></pre></td></tr></table></figure><h2 id="components-內容"><a href="#components-內容" class="headerlink" title="components 內容"></a>components 內容</h2><p>原本會將每個頁面的 .vue 檔放在這裡，做了一陣子後覺得，頁面歸頁面，這目錄下還是放些單純一點的元件，事實證明好像沒什麼差別，單純就是自己爽就好，目前這裡放了些某些畫面上會使用到的元件，有個小型客製化的時間選擇器，用來選擇每間隔 15 分鐘的時間，另外的是畫面的 sidebar 內容，sidebar 內容其實做了很多東西，不過由於不算是完整頁面，還是被我歸類到這目錄下了</p><h2 id="helpers-內容"><a href="#helpers-內容" class="headerlink" title="helpers 內容"></a>helpers 內容</h2><p>之前不曉得在哪裡看到有個教學用了這樣的目錄，然後裡面主要是定義一些變數讓整個專案來使用，很想學習這樣的做法，不過目前有點東施效顰吧！裡面也沒放幾個變數，一個是 CDN 路徑，一個是 Object hasOwnProperty 的檢查，不過另外寫了一個取得目前執行環境所用到的 API 路徑，以及一堆時間計算、字串處理的 function</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import moment from &#x27;moment&#x27;</span><br><span class="line">　　　</span><br><span class="line">const helpers = &#123;</span><br><span class="line">  getParameterByName (name, url) &#123;</span><br><span class="line">    if (!url) url = window.location.href</span><br><span class="line">    name = name.replace(/[[\]]/g, &#x27;\\$&amp;&#x27;)</span><br><span class="line">    let regex = new RegExp(&#x27;[?&amp;|#]&#x27; + name + &#x27;(=([^&amp;#]*)|&amp;|#|$)&#x27;)</span><br><span class="line">    let results = regex.exec(url)</span><br><span class="line">    if (!results) return null</span><br><span class="line">    if (!results[2]) return &#x27;&#x27;</span><br><span class="line">    return decodeURIComponent(results[2].replace(/\+/g, &#x27; &#x27;))</span><br><span class="line">  &#125;,</span><br><span class="line">  isEmpty (obj) &#123;</span><br><span class="line">    // null and undefined are &quot;empty&quot;</span><br><span class="line">    if (obj == null) return true</span><br><span class="line"></span><br><span class="line">    // Assume if it has a length property with a non-zero value</span><br><span class="line">    // that that property is correct.</span><br><span class="line">    if (obj.length &gt; 0) return false</span><br><span class="line">    if (obj.length === 0) return true</span><br><span class="line"></span><br><span class="line">    // If it isn&#x27;t an object at this point</span><br><span class="line">    // it is empty, but it can&#x27;t be anything *but* empty</span><br><span class="line">    // Is it empty?  Depends on your application.</span><br><span class="line">    if (typeof obj !== &#x27;object&#x27;) return true</span><br><span class="line"></span><br><span class="line">    // Otherwise, does it have any properties of its own?</span><br><span class="line">    // Note that this doesn&#x27;t handle</span><br><span class="line">    // toString and valueOf enumeration bugs in IE &lt; 9</span><br><span class="line">    for (var key in obj) &#123;</span><br><span class="line">      if (hasOwnProperty.call(obj, key)) return false</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">  &#125;,</span><br><span class="line">  getCurrentTime (format) &#123;</span><br><span class="line">    return moment().format(format)</span><br><span class="line">  &#125;,</span><br><span class="line">  getNextDate (format) &#123;</span><br><span class="line">    return moment().add(1, &#x27;days&#x27;).format(format)</span><br><span class="line">  &#125;,</span><br><span class="line">  getPrevDate (format) &#123;</span><br><span class="line">    return moment().subtract(1, &#x27;days&#x27;).format(format)</span><br><span class="line">  &#125;,</span><br><span class="line">  nl2br (str, isXhtml) &#123;</span><br><span class="line">    var breakTag = (isXhtml || typeof isXhtml === &#x27;undefined&#x27;) ? &#x27;&lt;br /&gt;&#x27; : &#x27;&lt;br&gt;&#x27;</span><br><span class="line">    return (str + &#x27;&#x27;).replace(/([^&gt;\r\n]?)(\r\n|\n\r|\r|\n)/g, &#x27;$1&#x27; + breakTag + &#x27;$2&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  thousandComma (number) &#123;</span><br><span class="line">    let num = number.toString()</span><br><span class="line">    let pattern = /(-?\d+)(\d&#123;3&#125;)/</span><br><span class="line"></span><br><span class="line">    while (pattern.test(num)) &#123;</span><br><span class="line">      num = num.replace(pattern, &#x27;$1,$2&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    return num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default helpers</span><br></pre></td></tr></table></figure><h2 id="i18n-內容"><a href="#i18n-內容" class="headerlink" title="i18n 內容"></a>i18n 內容</h2><p>顧名思義就是用來放多語系的檔案，當初為了把多語系的部分搞定也是四處找資料，花了不少時間改好自己用的樣子</p><p>目前使用的 <a href="https://github.com/kazupon/vue-i18n">vue-i18n</a>的v.7.6版，<a href="http://kazupon.github.io/vue-i18n/introduction.html">參考文件</a></p><p>i18n 目錄如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/i18n</span><br><span class="line">├── index.js</span><br><span class="line">└── languages</span><br><span class="line">    ├── en-US.json</span><br><span class="line">    ├── ja-JP.json</span><br><span class="line">    ├── zh-CN.json</span><br><span class="line">    └── zh-TW.json</span><br></pre></td></tr></table></figure><p>index.js 內容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">// Vuex-i18n</span><br><span class="line">import VueI18n from &#x27;vue-i18n&#x27;</span><br><span class="line">// i18n</span><br><span class="line">import zhTW from &#x27;./languages/zh-TW.json&#x27;</span><br><span class="line">import zhCN from &#x27;./languages/zh-CN.json&#x27;</span><br><span class="line">import jaJP from &#x27;./languages/ja-JP.json&#x27;</span><br><span class="line">import enUS from &#x27;./languages/en-US.json&#x27;</span><br><span class="line"></span><br><span class="line">// Vuex-i18n</span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line">const messages = &#123;</span><br><span class="line">  &#x27;zh-TW&#x27;: zhTW,</span><br><span class="line">  &#x27;zh-CN&#x27;: zhCN,</span><br><span class="line">  &#x27;ja-JP&#x27;: jaJP,</span><br><span class="line">  &#x27;en-US&#x27;: enUS</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1.檢查 localStorage 語系</span><br><span class="line">// 2.檢查瀏覽器語系</span><br><span class="line">// 3.預設英文語系</span><br><span class="line">let locale = localStorage.getItem(&#x27;LANGUAGE&#x27;) || navigator.language || &#x27;en-US&#x27;</span><br><span class="line"></span><br><span class="line">const i18n = new VueI18n(&#123;</span><br><span class="line">  locale,</span><br><span class="line">  fallbackLocale: &#x27;zh-TW&#x27;,</span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default i18n</span><br></pre></td></tr></table></figure><p>而 languages 下的檔案內容，以 zh-TW.json 為例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;shortMonths&quot;: [&quot;1月&quot;, &quot;2月&quot;, &quot;3月&quot;, &quot;4月&quot;, &quot;5月&quot;, &quot;6月&quot;, &quot;7月&quot;, &quot;8月&quot;, &quot;9月&quot;, &quot;10月&quot;, &quot;11月&quot;, &quot;12月&quot;],</span><br><span class="line">  &quot;longMonths&quot;: [&quot;一月&quot;, &quot;二月&quot;, &quot;三月&quot;, &quot;四月&quot;, &quot;五月&quot;, &quot;六月&quot;, &quot;七月&quot;, &quot;八月&quot;, &quot;九月&quot;, &quot;十月&quot;, &quot;十一月&quot;, &quot;十二月&quot;],</span><br><span class="line">  &quot;shortDays&quot;: [&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;],</span><br><span class="line">  &quot;longDays&quot;: [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;],</span><br><span class="line">  &quot;天&quot;: &quot;天&quot;,</span><br><span class="line">  &quot;時&quot;: &quot;時&quot;,</span><br><span class="line">  &quot;分&quot;: &quot;分&quot;,</span><br><span class="line">  &quot;小時&quot;: &quot;小時&quot;,</span><br><span class="line">  &quot;分鐘&quot;: &quot;分鐘&quot;,</span><br><span class="line"></span><br><span class="line">  &quot;確定&quot;: &quot;確定&quot;,</span><br><span class="line">  &quot;取消&quot;: &quot;取消&quot;,</span><br><span class="line">  &quot;關閉&quot;: &quot;關閉&quot;,</span><br><span class="line">  &quot;儲存&quot;: &quot;儲存&quot;,</span><br><span class="line">  &quot;上一步&quot;: &quot;上一步&quot;,</span><br><span class="line">  &quot;下一步&quot;: &quot;下一步&quot;,</span><br><span class="line"></span><br><span class="line">  &quot;消費稅 X%&quot;: &quot;消費稅 &#123;0&#125;%&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 .vue 檔內使用時，範例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;日期：&#123;&#123; displayToday &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">  &lt;button&gt;&#123;&#123; $t(&#x27;確定&#x27;) &#125;&#125;&lt;/button&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; $t(&#x27;消費稅 X%&#x27;, [tax]) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import moment from &#x27;moment&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tax: 8</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    displayToday () &#123;</span><br><span class="line">      let yyyy = moment().year()</span><br><span class="line">      let mm = moment().month()</span><br><span class="line">      let dd = moment().date()</span><br><span class="line">      let weekday = moment().day()</span><br><span class="line">      // 2018年7月22(日)</span><br><span class="line">      return yyyy + &#x27;年&#x27; + this.$i18n.t(&#x27;shortMonths&#x27;)[mm] + dd + &#x27;日&#x27; + &#x27;(&#x27; + this.$i18n.t(&#x27;shortDays&#x27;)[weekday] + &#x27;)&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因為要寫的東西太多，所以決定偷懶分成不同 Part 來寫</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;頭一次用 Vue.js 來開發整個網站的專案，雖然還沒全部做完，還是先來做一下至目前為止的一些記錄，提供日後有需要的時候可以參考。專案是使用 vue-cli 3.0 版本產生的，環境所需 &lt;code&gt;Node &amp;gt;=8.&lt;/code&gt;，目前本機環境 node.js v6.9.5，因為有舊專案的需求，所以不敢直接更新上去，所以使用 nvm 來安裝不同版本的 node.js&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="vuex" scheme="https://soarlin.github.io/tags/vuex/"/>
    
    <category term="vuejs" scheme="https://soarlin.github.io/tags/vuejs/"/>
    
    <category term="i18n" scheme="https://soarlin.github.io/tags/i18n/"/>
    
    <category term="webpack" scheme="https://soarlin.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue 使用 Firebase Cloud Messaging</title>
    <link href="https://soarlin.github.io/2018/06/02/Vue-%E4%BD%BF%E7%94%A8Firebase-Cloud-Messaging/"/>
    <id>https://soarlin.github.io/2018/06/02/Vue-%E4%BD%BF%E7%94%A8Firebase-Cloud-Messaging/</id>
    <published>2018-06-02T00:54:34.000Z</published>
    <updated>2022-07-28T04:58:07.425Z</updated>
    
    <content type="html"><![CDATA[<!-- MarkdownTOC --><ul><li>Vue 專案內使用共同 SASS 資源</li><li>Vue 專案目錄結構<ul><li>manifest.json</li><li>firebase-messaging-sw.js</li><li>src/main.js</li></ul></li><li>Get Push Token</li><li>Get Push Notification<ul><li>網站開啟時，收到推播</li><li>網頁關閉下，收到推播</li></ul></li><li>發送推播</li></ul><!-- /MarkdownTOC --><p>這幾個月來一直懶得更新文章，其實一直想找時間把最近工作的一些事項做些紀錄，結果都一直在看新入坑女團(GFriend)的影片，由於昨天一整天一直在鬼打牆，早上打破一片牆，下午又再遇到一片牆，好在下班前有所突破，趁著記憶猶新的時候，趕緊紀錄一下。</p><p>其實到目前為止，本身對於 PWA (Progressive Web Apps) 沒啥研究，所以對 Service Worker 也不太了解，在這種情況下就去串接 Firebase Cloud Messaging，真的有點越級挑戰了，所以一直碰到問題也很正常，甚至一度不曉得該先解決什麼問題，雖然下班前有完成一個簡單的 Web Push Notification，但還是覺得有些運氣成份在。</p><span id="more"></span><p>前情提要一下，目前的前端專案是使用 <code>vue-cli 3.0</code> 版搭配 webpack 樣板建置的，其實對於 webpack 的一堆設定也都還沒完全了解，所以三不五時會遇到一些問題，加上 vue-cli 版本比較新，有時上網找答案常常會找到 2.x 版的一些例子，只能先了解後會意，然後再 try &amp; error 的解決。</p><p>有個自己每次重開機就會遇到的問題：</p><ul><li>node 版本需要 8.x 以上才能執行，所以透過 nvm 來裝不同版本切換</li></ul><h2 id="Vue-專案內使用共同-SASS-資源"><a href="#Vue-專案內使用共同-SASS-資源" class="headerlink" title="Vue 專案內使用共同 SASS 資源"></a>Vue 專案內使用共同 SASS 資源</h2><p>另外為了全域共同 sass 檔案來做一些定義，如：變數, Mixins, class 等，也是花了一番功夫</p><p>由於不是本篇重點，所以只記錄重點</p><ol><li><code>npm install --save-dev sass-resources-loader</code></li><li>修改 <code>/build/utils.js</code> 檔案內的 <code>exports.cssLoaders</code> function</li></ol><p>大致修改如下：把原本 sass loader 的 function 替換成新加入的 function</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.cssLoaders = function (options) &#123;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  const cssLoader = &#123;...&#125;</span><br><span class="line">  const postcssLoader = &#123;...&#125;</span><br><span class="line">  function generateLoaders (loader, loaderOptions) &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  // =========</span><br><span class="line">  // SASS 配置</span><br><span class="line">  // =========</span><br><span class="line">  function resolveResouce(name) &#123;</span><br><span class="line">    return path.resolve(__dirname, &#x27;../src/assets/sass/&#x27; + name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function generateSassResourceLoader() &#123;</span><br><span class="line">    let loaders = [</span><br><span class="line">      cssLoader,</span><br><span class="line">      // &#x27;postcss-loader&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        loader: &#x27;sass-loader&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          indentedSyntax: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        loader: &#x27;sass-resources-loader&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          // it need a absolute path</span><br><span class="line">          // global usage sass file</span><br><span class="line">          resources: resolveResouce(&#x27;resources.sass&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">    if (options.extract) &#123;</span><br><span class="line">      return ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: loaders,</span><br><span class="line">        fallback: &#x27;vue-style-loader&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return [&#x27;vue-style-loader&#x27;].concat(loaders)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;　</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    css: generateLoaders(),</span><br><span class="line">    postcss: generateLoaders(),</span><br><span class="line">    less: generateLoaders(&#x27;less&#x27;),</span><br><span class="line">    // sass: generateLoaders(&#x27;sass&#x27;, &#123; indentedSyntax: true &#125;),</span><br><span class="line">    // scss: generateLoaders(&#x27;sass&#x27;),</span><br><span class="line">    sass: generateSassResourceLoader(),</span><br><span class="line">    scss: generateSassResourceLoader(),</span><br><span class="line">    stylus: generateLoaders(&#x27;stylus&#x27;),</span><br><span class="line">    styl: generateLoaders(&#x27;stylus&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來進入正題，其實 vue + firebase cloud messaging 網路上找也有一些相關文章或<a href="https://github.com/invokemedia/vue-push-notification-example">範例</a>，而且 firebase 本身也有介紹如何在 client 的 Javascript 設置 FCM ( <a href="https://firebase.google.com/docs/cloud-messaging/js/client">Set Up a JavaScript Firebase Cloud Messaging Client App</a> )，而我一開始也是按照 firebase 上的文章做，但沒多久就碰到問題，無法取得 token….XD</p><h2 id="Vue-專案目錄結構"><a href="#Vue-專案目錄結構" class="headerlink" title="Vue 專案目錄結構"></a>Vue 專案目錄結構</h2><p>一開始以為是透過 vue-cli 在 local 開發，所產生的網址是沒有 https 的 <code>http://localhost:8081</code> (因為 8080 port 用來啟動後端 API server)，所以一度去找了 <a href="https://ngrok.com/">ngrok</a> 這軟體來用，不過還是一直有問題，後來發現似乎是要跟 FCM 取得 token 時，需要一支 service worker 的 js 檔，而預設會使用位置是 <code>SERVER_ROOT/firbase-messaging-sw.js</code>，然後就去找了些文章看，似乎我還少了這麼一隻 service worker 註冊的檔案，所以除了要加上這隻檔案，又遇到如何讓 vue-cli build 出來的目錄也能有這個檔案以及讀取路徑的問題….唉～</p><p>最終還是逃不過要像 PWA 一樣有個 manifest.json 描述檔，以及一個 service-worker.js 檔，所以這檔案都放到到 <code>static</code> 目錄下，讓專案編譯後能夠在複製一份到 <code>dist</code> 目錄內，目前專案目錄的架構大致如下：</p><p><img src="/images/vue_firebase/vue_folder_structure.png" alt="Vue專案目錄結構"></p><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><p>裡面最重要的一行，就是記得加上 <code>gcm_sender_id</code>，這在 firebase 教學文件裡的步驟有提到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;short_name&quot;: &quot;YOUR_PROJECT_SHORT_NAME&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;YOUR_PROJECT_NAME&quot;,</span><br><span class="line">  &quot;icons&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;/static/images/logo.png&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image/png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;192x192&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;start_url&quot;: &quot;/&quot;,</span><br><span class="line">  &quot;background_color&quot;: &quot;#ecf0f2&quot;,</span><br><span class="line">  &quot;display&quot;: &quot;fullscreen&quot;,</span><br><span class="line">  &quot;theme_color&quot;: &quot;#34aeab&quot;,</span><br><span class="line">  &quot;gcm_sender_id&quot;: &quot;YOUR_SENDER_ID&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而主要頁面 <code>index.html</code> 需要能夠讀取到 manifiest.json 檔案，所以 index.html 內的 &lt;head&gt; 需要加入底下這行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;manifest&quot; href=&quot;&lt;%= htmlWebpackPlugin.files.publicPath %&gt;static/manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="firebase-messaging-sw-js"><a href="#firebase-messaging-sw-js" class="headerlink" title="firebase-messaging-sw.js"></a>firebase-messaging-sw.js</h3><p>這是給 service worker register 用的檔案，內容分兩部分，先介紹第一部分，重點是 firebase 專案內的 <code>sender_id</code> 要記得加進去</p><p><img src="/images/vue_firebase/sender_id.png" alt="Firebase Sender ID"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// [START initialize_firebase_in_sw]</span><br><span class="line">// Import and configure the Firebase SDK</span><br><span class="line">// These scripts are made available when the app is served or</span><br><span class="line">// deployed on Firebase Hosting</span><br><span class="line">// If you do not serve/host your project using Firebase Hosting</span><br><span class="line">// see https://firebase.google.com/docs/web/setup</span><br><span class="line"></span><br><span class="line">importScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-app.js&#x27;);</span><br><span class="line">importScripts(&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-messaging.js&#x27;);</span><br><span class="line"></span><br><span class="line">firebase.initializeApp(&#123;</span><br><span class="line">  messagingSenderId: &#x27;YOUR_SENDER_ID&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const messaging = firebase.messaging();</span><br><span class="line">// [END initialize_firebase_in_sw]</span><br></pre></td></tr></table></figure><h3 id="src-main-js"><a href="#src-main-js" class="headerlink" title="src/main.js"></a>src/main.js</h3><p>另外要讓 service worker 可以正確使用這檔案，需要透過 <code>navigator.serviceWorker.register</code> 這來指定路徑</p><p>底下是目前使用的方式，在 <code>/src/main.js</code> 裡面將 FCM 設定好，這裡需要先取的 web push 所需要的 public VAPID key，可以參考<a href="https://firebase.google.com/docs/cloud-messaging/js/client#configure_web_credentials_with_fcm">這裡</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const FCMconfig = &#123;</span><br><span class="line">  apiKey: &#x27;YOUR_API_KEY&#x27;,</span><br><span class="line">  authDomain: &#x27;YOUR_DOMAIN&#x27;,</span><br><span class="line">  databaseURL: &#x27;https://&lt;YOUR_PROJECT_ID&gt;.firebaseio.com&#x27;,</span><br><span class="line">  projectId: &#x27;YOUR_PROJECT_ID&#x27;,</span><br><span class="line">  storageBucket: &#x27;&lt;YOUR_PROJECT_ID&gt;.appspot.com&#x27;,</span><br><span class="line">  messagingSenderId: &#x27;YOUR_SENDER_ID&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">firebase.initializeApp(FCMconfig)</span><br><span class="line"></span><br><span class="line">Vue.prototype.$messaging = null</span><br><span class="line">if (firebase.messaging.isSupported()) &#123;</span><br><span class="line">  firebase.initializeApp(FCMconfig)</span><br><span class="line">  // Retrieve Firebase Messaging object, assign to Vue Object</span><br><span class="line">  Vue.prototype.$messaging = firebase.messaging()</span><br><span class="line">  // Add the public key generated from the Firebase console</span><br><span class="line">  Vue.prototype.$messaging.usePublicVapidKey(process.env.VAPID_KEY)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Change server-worker.js register path</span><br><span class="line">navigator.serviceWorker.register(&#x27;/static/firebase-messaging-sw.js&#x27;)</span><br><span class="line">  .then((registration) =&gt; &#123;</span><br><span class="line">    Vue.prototype.$swRegistration = registration</span><br><span class="line">    Vue.prototype.$messaging.useServiceWorker(registration)</span><br><span class="line">  &#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>上述使用 <code>Vue.prototype.$messaging</code> 來引入全域變數 <code>$messaging</code> 方便後面在不同 .vue 檔內都可以使用，所以接下來就可以真的來取得 push token 了</p><h2 id="Get-Push-Token"><a href="#Get-Push-Token" class="headerlink" title="Get Push Token"></a>Get Push Token</h2><p>接著就可以在 vue 內，可以參考下面範例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;registeFCM&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&#x27;firebase/messaging&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  data () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// ...</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  mounted () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.initFCM()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    initFCM () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$messaging.onTokenRefresh(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$messaging.getToken().then(<span class="function">(<span class="params">refreshedToken</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(<span class="string">&#x27;Token refreshed.&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.setTokenSentToServer(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.sendTokenToServer(refreshedToken)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    registeFCM () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$messaging.requestPermission().then(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;Notification permission granted.&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.getToken()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;Unable to get permission to notify.&#x27;</span>, err)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    getToken () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$messaging.getToken().then(<span class="function">(<span class="params">currentToken</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (currentToken) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.sendTokenToServer(currentToken)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(<span class="string">&#x27;No Instance ID token available. Request permission to generate one.&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// Show permission UI.</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.setTokenSentToServer(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;An error occurred while retrieving token. &#x27;</span>, err)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.setTokenSentToServer(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    sendTokenToServer (token) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// <span class="doctag">TODO:</span> Send Token To Your Server</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    setTokenSentToServer (type) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (type) <span class="keyword">return</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// <span class="doctag">TODO:</span> Delete Register Token From Your Server</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;sass&quot;</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="xml">// ...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Get-Push-Notification"><a href="#Get-Push-Notification" class="headerlink" title="Get Push Notification"></a>Get Push Notification</h2><p>當推播發送成功後，接收 push notification 有兩種情況，網站開啟時，與網頁關閉時，底下再針對兩種情況繼續說明</p><h3 id="網站開啟時，收到推播"><a href="#網站開啟時，收到推播" class="headerlink" title="網站開啟時，收到推播"></a>網站開啟時，收到推播</h3><p>透過 <code>firebase messaging</code> 的 <code>onMessage</code> 來接收通知</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$messaging.onMessage(<span class="function"><span class="params">payload</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Message receiver &#x27;</span>, payload);</span><br><span class="line">  <span class="keyword">let</span> notification = payload.notification;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Notification: &#x27;</span>, notification);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="網頁關閉下，收到推播"><a href="#網頁關閉下，收到推播" class="headerlink" title="網頁關閉下，收到推播"></a>網頁關閉下，收到推播</h3><p>透過在 service worker 內寫的背景接收通知的處理，所以原本的 sw.js 又要繼續第二部分的 code</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">messaging.setBackgroundMessageHandler(<span class="function"><span class="keyword">function</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&#x27;[firebase-messaging-sw.js] Received background message &#x27;</span>,</span><br><span class="line">    payload</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// Customize notification here</span></span><br><span class="line">  <span class="keyword">var</span> notification = payload.notification;</span><br><span class="line">  <span class="keyword">var</span> notificationTitle = notification.title;</span><br><span class="line">  <span class="keyword">var</span> notificationOptions = &#123;</span><br><span class="line">    <span class="attr">body</span>: notification.body,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;/static/images/logo.png&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> self.registration.showNotification(</span><br><span class="line">    notificationTitle,</span><br><span class="line">    notificationOptions</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以完整的 <code>firebase-messaging-sw.js</code> 檔案如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">importScripts(<span class="string">&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-app.js&#x27;</span>);</span><br><span class="line">importScripts(<span class="string">&#x27;https://www.gstatic.com/firebasejs/5.0.0/firebase-messaging.js&#x27;</span>);</span><br><span class="line">firebase.initializeApp(&#123;</span><br><span class="line">  <span class="attr">messagingSenderId</span>: <span class="string">&#x27;YOUR_SENDER_ID&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> messaging = firebase.messaging();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Background Message Handler</span></span><br><span class="line">messaging.setBackgroundMessageHandler(<span class="function"><span class="keyword">function</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&#x27;[firebase-messaging-sw.js] Received background message &#x27;</span>,</span><br><span class="line">    payload</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// Customize notification here</span></span><br><span class="line">  <span class="keyword">var</span> notification = payload.notification;</span><br><span class="line">  <span class="keyword">var</span> notificationTitle = notification.title;</span><br><span class="line">  <span class="keyword">var</span> notificationOptions = &#123;</span><br><span class="line">    <span class="attr">body</span>: notification.body,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;/static/images/logo.png&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promiseChain = clients</span><br><span class="line">    .matchAll(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;window&#x27;</span>,</span><br><span class="line">      <span class="attr">includeUncontrolled</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">windowClients</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; windowClients.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> windowClient = windowClients[i];</span><br><span class="line">        windowClient.postMessage(notify);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> self.registration.showNotification(</span><br><span class="line">        notificationTitle,</span><br><span class="line">        notificationOptions</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> promiseChain;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="發送推播"><a href="#發送推播" class="headerlink" title="發送推播"></a>發送推播</h2><p>為了發送推播也是莫名其妙地遇到問題，鬼打牆了好一陣子才解決，照著 <a href="https://firebase.google.com/docs/cloud-messaging/js/first-message#send_a_notification_message">firebase 說明</a>做，遇到了些問題</p><ol><li>POST 的網址，project id 帶進去似乎還是錯誤…why?</li><li>Authorization 的值到底從何而來，找了很久一直找不到 firebase 專案設定內有類似的值</li></ol><p>所以一直無法順利測試，後來又翻到了另一篇<a href="https://firebase.google.com/docs/cloud-messaging/js/receive#setting_notification_options_in_the_send_request">文章</a>，首先這個發送的網址固定，看起來沒問題，而 Authorization 就是 Firebase 專案設定裡面的 Server Key，就用這個試試看吧！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://fcm.googleapis.com/fcm/send</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Authorization: key=AIzaSyC...akjgSX0e4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123; &quot;notification&quot;: &#123;</span><br><span class="line">    &quot;title&quot;: &quot;Background Message Title&quot;,</span><br><span class="line">    &quot;body&quot;: &quot;Background message body&quot;,</span><br><span class="line">    &quot;click_action&quot; : &quot;https://dummypage.com&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &quot;to&quot; : &quot;eEz-Q2sG8nQ:APA91bHJQRT0JJ...&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一開始測試時，一直遇到 UnAuthorization 的錯誤，找了解決辦法還是沒找到可用的，就想說把 Server Key 從舊版的換成新版的(加密後資料長度長很多)，結果就發送成功了…其實我真的不懂為什麼，今天再換回舊版 server key 還是可以發送，那昨天下午到底是什麼詭異狀況？</p><p>總之最後是成功做完一個基本 web push notification 的流程了，真是可喜可賀！打完收工！</p>]]></content>
    
    
    <summary type="html">&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;Vue 專案內使用共同 SASS 資源&lt;/li&gt;
&lt;li&gt;Vue 專案目錄結構&lt;ul&gt;
&lt;li&gt;manifest.json&lt;/li&gt;
&lt;li&gt;firebase-messaging-sw.js&lt;/li&gt;
&lt;li&gt;src/main.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get Push Token&lt;/li&gt;
&lt;li&gt;Get Push Notification&lt;ul&gt;
&lt;li&gt;網站開啟時，收到推播&lt;/li&gt;
&lt;li&gt;網頁關閉下，收到推播&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;發送推播&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;p&gt;這幾個月來一直懶得更新文章，其實一直想找時間把最近工作的一些事項做些紀錄，結果都一直在看新入坑女團(GFriend)的影片，由於昨天一整天一直在鬼打牆，早上打破一片牆，下午又再遇到一片牆，好在下班前有所突破，趁著記憶猶新的時候，趕緊紀錄一下。&lt;/p&gt;
&lt;p&gt;其實到目前為止，本身對於 PWA (Progressive Web Apps) 沒啥研究，所以對 Service Worker 也不太了解，在這種情況下就去串接 Firebase Cloud Messaging，真的有點越級挑戰了，所以一直碰到問題也很正常，甚至一度不曉得該先解決什麼問題，雖然下班前有完成一個簡單的 Web Push Notification，但還是覺得有些運氣成份在。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="https://soarlin.github.io/categories/Frontend/"/>
    
    
    <category term="vuejs" scheme="https://soarlin.github.io/tags/vuejs/"/>
    
    <category term="firebase" scheme="https://soarlin.github.io/tags/firebase/"/>
    
    <category term="fcm" scheme="https://soarlin.github.io/tags/fcm/"/>
    
    <category term="service worker" scheme="https://soarlin.github.io/tags/service-worker/"/>
    
    <category term="vuecli" scheme="https://soarlin.github.io/tags/vuecli/"/>
    
    <category term="webpack" scheme="https://soarlin.github.io/tags/webpack/"/>
    
    <category term="push notification" scheme="https://soarlin.github.io/tags/push-notification/"/>
    
  </entry>
  
</feed>
